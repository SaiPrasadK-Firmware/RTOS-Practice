
UART-Task-Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005930  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08005ad0  08005ad0  00006ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d30  08005d30  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005d30  08005d30  00006d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d38  08005d38  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d38  08005d38  00006d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d3c  08005d3c  00006d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005d40  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b10  20000060  08005da0  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b70  08005da0  00007b70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011176  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ac  00000000  00000000  00018206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  0001abb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b04  00000000  00000000  0001ba18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003402  00000000  00000000  0001c51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe49  00000000  00000000  0001f91e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f2f6  00000000  00000000  0002f767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bea5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040b8  00000000  00000000  000beaa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000c2b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ab8 	.word	0x08005ab8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005ab8 	.word	0x08005ab8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fb30 	bl	8000c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f836 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f8ca 	bl	8000760 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005cc:	f000 f89e 	bl	800070c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


    /* USER CODE BEGIN 1 */
  	delay_Queue = xQueueCreate(5, sizeof(int));
 80005d0:	2200      	movs	r2, #0
 80005d2:	2104      	movs	r1, #4
 80005d4:	2005      	movs	r0, #5
 80005d6:	f002 fa4e 	bl	8002a76 <xQueueGenericCreate>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <main+0x5c>)
 80005de:	6013      	str	r3, [r2, #0]

  	if (delay_Queue == NULL) {
 80005e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <main+0x5c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d101      	bne.n	80005ec <main+0x30>
  	    // Queue not created, handle error
  	    Error_Handler();
 80005e8:	f000 fa08 	bl	80009fc <Error_Handler>

  	//UART_Send_String("Enter to Update   LED  Delay\n");
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005ec:	f001 ff98 	bl	8002520 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Led_Blink_task */
  Led_Blink_taskHandle = osThreadNew(Led_Blink, NULL, &Led_Blink_task_attributes);
 80005f0:	4a0a      	ldr	r2, [pc, #40]	@ (800061c <main+0x60>)
 80005f2:	2100      	movs	r1, #0
 80005f4:	480a      	ldr	r0, [pc, #40]	@ (8000620 <main+0x64>)
 80005f6:	f001 ffdd 	bl	80025b4 <osThreadNew>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a09      	ldr	r2, [pc, #36]	@ (8000624 <main+0x68>)
 80005fe:	6013      	str	r3, [r2, #0]

  /* creation of USART_Task */
  USART_TaskHandle = osThreadNew(Uart_Task, NULL, &USART_Task_attributes);
 8000600:	4a09      	ldr	r2, [pc, #36]	@ (8000628 <main+0x6c>)
 8000602:	2100      	movs	r1, #0
 8000604:	4809      	ldr	r0, [pc, #36]	@ (800062c <main+0x70>)
 8000606:	f001 ffd5 	bl	80025b4 <osThreadNew>
 800060a:	4603      	mov	r3, r0
 800060c:	4a08      	ldr	r2, [pc, #32]	@ (8000630 <main+0x74>)
 800060e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000610:	f001 ffaa 	bl	8002568 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <main+0x58>
 8000618:	200000c4 	.word	0x200000c4
 800061c:	08005b9c 	.word	0x08005b9c
 8000620:	08000869 	.word	0x08000869
 8000624:	200000c8 	.word	0x200000c8
 8000628:	08005bc0 	.word	0x08005bc0
 800062c:	080008c1 	.word	0x080008c1
 8000630:	200000cc 	.word	0x200000cc

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	@ 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	@ 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f004 fdba 	bl	80051bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b29      	ldr	r3, [pc, #164]	@ (8000704 <SystemClock_Config+0xd0>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	4a28      	ldr	r2, [pc, #160]	@ (8000704 <SystemClock_Config+0xd0>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	@ 0x40
 8000668:	4b26      	ldr	r3, [pc, #152]	@ (8000704 <SystemClock_Config+0xd0>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b23      	ldr	r3, [pc, #140]	@ (8000708 <SystemClock_Config+0xd4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000680:	4a21      	ldr	r2, [pc, #132]	@ (8000708 <SystemClock_Config+0xd4>)
 8000682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	@ (8000708 <SystemClock_Config+0xd4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006a8:	2310      	movs	r3, #16
 80006aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006ac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006b2:	2304      	movs	r3, #4
 80006b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b6:	2307      	movs	r3, #7
 80006b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fdc0 	bl	8001244 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ca:	f000 f997 	bl	80009fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2302      	movs	r3, #2
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2102      	movs	r1, #2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f822 	bl	8001734 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006f6:	f000 f981 	bl	80009fc <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	@ 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000710:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <MX_USART2_UART_Init+0x4c>)
 8000712:	4a12      	ldr	r2, [pc, #72]	@ (800075c <MX_USART2_UART_Init+0x50>)
 8000714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000716:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <MX_USART2_UART_Init+0x4c>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <MX_USART2_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_USART2_UART_Init+0x4c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <MX_USART2_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	@ (8000758 <MX_USART2_UART_Init+0x4c>)
 8000744:	f001 fa16 	bl	8001b74 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800074e:	f000 f955 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000007c 	.word	0x2000007c
 800075c:	40004400 	.word	0x40004400

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	@ 0x28
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b2d      	ldr	r3, [pc, #180]	@ (8000830 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a2c      	ldr	r2, [pc, #176]	@ (8000830 <MX_GPIO_Init+0xd0>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b2a      	ldr	r3, [pc, #168]	@ (8000830 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b26      	ldr	r3, [pc, #152]	@ (8000830 <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a25      	ldr	r2, [pc, #148]	@ (8000830 <MX_GPIO_Init+0xd0>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b23      	ldr	r3, [pc, #140]	@ (8000830 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000830 <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a1e      	ldr	r2, [pc, #120]	@ (8000830 <MX_GPIO_Init+0xd0>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a17      	ldr	r2, [pc, #92]	@ (8000830 <MX_GPIO_Init+0xd0>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4812      	ldr	r0, [pc, #72]	@ (8000834 <MX_GPIO_Init+0xd4>)
 80007ec:	f000 fcf6 	bl	80011dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	480c      	ldr	r0, [pc, #48]	@ (8000838 <MX_GPIO_Init+0xd8>)
 8000808:	f000 fb64 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800080c:	2320      	movs	r3, #32
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	4804      	ldr	r0, [pc, #16]	@ (8000834 <MX_GPIO_Init+0xd4>)
 8000824:	f000 fb56 	bl	8000ed4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	@ 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40020000 	.word	0x40020000
 8000838:	40020800 	.word	0x40020800

0800083c <UART_Send_String>:

/* USER CODE BEGIN 4 */
void UART_Send_String(char *str)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff fccb 	bl	80001e0 <strlen>
 800084a:	4603      	mov	r3, r0
 800084c:	b29a      	uxth	r2, r3
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	6879      	ldr	r1, [r7, #4]
 8000854:	4803      	ldr	r0, [pc, #12]	@ (8000864 <UART_Send_String+0x28>)
 8000856:	f001 f9dd 	bl	8001c14 <HAL_UART_Transmit>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000007c 	.word	0x2000007c

08000868 <Led_Blink>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Led_Blink */
void Led_Blink(void *argument)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t Default_delay = 500;
 8000870:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000874:	60fb      	str	r3, [r7, #12]
	uint32_t New_delay ;

 while(1)
 {
	 if(xQueueReceive(delay_Queue, &New_delay, 0) == pdPASS)
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <Led_Blink+0x4c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f107 0108 	add.w	r1, r7, #8
 800087e:	2200      	movs	r2, #0
 8000880:	4618      	mov	r0, r3
 8000882:	f002 faf7 	bl	8002e74 <xQueueReceive>
 8000886:	4603      	mov	r3, r0
 8000888:	2b01      	cmp	r3, #1
 800088a:	d101      	bne.n	8000890 <Led_Blink+0x28>
	 {
		 Default_delay = New_delay;
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	60fb      	str	r3, [r7, #12]
	 }
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000890:	2120      	movs	r1, #32
 8000892:	4809      	ldr	r0, [pc, #36]	@ (80008b8 <Led_Blink+0x50>)
 8000894:	f000 fcbb 	bl	800120e <HAL_GPIO_TogglePin>
	vTaskDelay(pdMS_TO_TICKS(Default_delay));
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800089e:	fb02 f303 	mul.w	r3, r2, r3
 80008a2:	4a06      	ldr	r2, [pc, #24]	@ (80008bc <Led_Blink+0x54>)
 80008a4:	fba2 2303 	umull	r2, r3, r2, r3
 80008a8:	099b      	lsrs	r3, r3, #6
 80008aa:	4618      	mov	r0, r3
 80008ac:	f002 fed8 	bl	8003660 <vTaskDelay>
	 if(xQueueReceive(delay_Queue, &New_delay, 0) == pdPASS)
 80008b0:	e7e1      	b.n	8000876 <Led_Blink+0xe>
 80008b2:	bf00      	nop
 80008b4:	200000c4 	.word	0x200000c4
 80008b8:	40020000 	.word	0x40020000
 80008bc:	10624dd3 	.word	0x10624dd3

080008c0 <Uart_Task>:
//  }
//  /* USER CODE END Uart_Task */
//}

void Uart_Task(void *argument)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b096      	sub	sp, #88	@ 0x58
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
    uint8_t rxChar;
    uint8_t buffer[20];
    uint8_t index = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    uint32_t New_Delay;

    UART_Send_String("Ready for input. Type delay and press Enter:\r\n");
 80008ce:	4843      	ldr	r0, [pc, #268]	@ (80009dc <Uart_Task+0x11c>)
 80008d0:	f7ff ffb4 	bl	800083c <UART_Send_String>

    while(1)
    {
        // Receive one character at a time
        if(HAL_UART_Receive(&huart2, &rxChar, 1, HAL_MAX_DELAY) == HAL_OK)
 80008d4:	f107 0156 	add.w	r1, r7, #86	@ 0x56
 80008d8:	f04f 33ff 	mov.w	r3, #4294967295
 80008dc:	2201      	movs	r2, #1
 80008de:	4840      	ldr	r0, [pc, #256]	@ (80009e0 <Uart_Task+0x120>)
 80008e0:	f001 fa23 	bl	8001d2a <HAL_UART_Receive>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d1f4      	bne.n	80008d4 <Uart_Task+0x14>
        {

            if(rxChar == '\r' || rxChar == '\n')
 80008ea:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80008ee:	2b0d      	cmp	r3, #13
 80008f0:	d003      	beq.n	80008fa <Uart_Task+0x3a>
 80008f2:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80008f6:	2b0a      	cmp	r3, #10
 80008f8:	d143      	bne.n	8000982 <Uart_Task+0xc2>
            {
                buffer[index] = '\0'; // Null terminate the string
 80008fa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80008fe:	3358      	adds	r3, #88	@ 0x58
 8000900:	443b      	add	r3, r7
 8000902:	2200      	movs	r2, #0
 8000904:	f803 2c18 	strb.w	r2, [r3, #-24]
                UART_Send_String("\r\n");
 8000908:	4836      	ldr	r0, [pc, #216]	@ (80009e4 <Uart_Task+0x124>)
 800090a:	f7ff ff97 	bl	800083c <UART_Send_String>

                New_Delay = atoi((char*)buffer);
 800090e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000912:	4618      	mov	r0, r3
 8000914:	f004 fba8 	bl	8005068 <atoi>
 8000918:	4603      	mov	r3, r0
 800091a:	63fb      	str	r3, [r7, #60]	@ 0x3c

                if(New_Delay > 0)
 800091c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800091e:	2b00      	cmp	r3, #0
 8000920:	d01e      	beq.n	8000960 <Uart_Task+0xa0>
                {
                    char msg[50];
                    xQueueSend(delay_Queue, &New_Delay, portMAX_DELAY);
 8000922:	4b31      	ldr	r3, [pc, #196]	@ (80009e8 <Uart_Task+0x128>)
 8000924:	6818      	ldr	r0, [r3, #0]
 8000926:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800092a:	2300      	movs	r3, #0
 800092c:	f04f 32ff 	mov.w	r2, #4294967295
 8000930:	f002 f900 	bl	8002b34 <xQueueGenericSend>
                    sprintf(msg, "LED delay updated to %lu ms\r\n", New_Delay);
 8000934:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	492c      	ldr	r1, [pc, #176]	@ (80009ec <Uart_Task+0x12c>)
 800093c:	4618      	mov	r0, r3
 800093e:	f004 fc1b 	bl	8005178 <siprintf>
                    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fc4a 	bl	80001e0 <strlen>
 800094c:	4603      	mov	r3, r0
 800094e:	b29a      	uxth	r2, r3
 8000950:	f107 0108 	add.w	r1, r7, #8
 8000954:	f04f 33ff 	mov.w	r3, #4294967295
 8000958:	4821      	ldr	r0, [pc, #132]	@ (80009e0 <Uart_Task+0x120>)
 800095a:	f001 f95b 	bl	8001c14 <HAL_UART_Transmit>
 800095e:	e002      	b.n	8000966 <Uart_Task+0xa6>
                }
                else
                {
                    UART_Send_String("Invalid input. Please enter a number > 0\r\n");
 8000960:	4823      	ldr	r0, [pc, #140]	@ (80009f0 <Uart_Task+0x130>)
 8000962:	f7ff ff6b 	bl	800083c <UART_Send_String>
                }

                // Reset buffer for next input
                memset(buffer, 0, sizeof(buffer));
 8000966:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800096a:	2214      	movs	r2, #20
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f004 fc24 	bl	80051bc <memset>
                index = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                UART_Send_String("Enter new delay: ");
 800097a:	481e      	ldr	r0, [pc, #120]	@ (80009f4 <Uart_Task+0x134>)
 800097c:	f7ff ff5e 	bl	800083c <UART_Send_String>
            {
 8000980:	e02b      	b.n	80009da <Uart_Task+0x11a>
            }
            else if(rxChar >= '0' && rxChar <= '9')
 8000982:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000986:	2b2f      	cmp	r3, #47	@ 0x2f
 8000988:	d913      	bls.n	80009b2 <Uart_Task+0xf2>
 800098a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800098e:	2b39      	cmp	r3, #57	@ 0x39
 8000990:	d80f      	bhi.n	80009b2 <Uart_Task+0xf2>
            {
                if(index < sizeof(buffer) - 1)
 8000992:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000996:	2b12      	cmp	r3, #18
 8000998:	d81f      	bhi.n	80009da <Uart_Task+0x11a>
                {
                    buffer[index++] = rxChar;
 800099a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800099e:	1c5a      	adds	r2, r3, #1
 80009a0:	f887 2057 	strb.w	r2, [r7, #87]	@ 0x57
 80009a4:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 80009a8:	3358      	adds	r3, #88	@ 0x58
 80009aa:	443b      	add	r3, r7
 80009ac:	f803 2c18 	strb.w	r2, [r3, #-24]
                if(index < sizeof(buffer) - 1)
 80009b0:	e013      	b.n	80009da <Uart_Task+0x11a>
                }
            }
            else if(rxChar == 8 || rxChar == 127)
 80009b2:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80009b6:	2b08      	cmp	r3, #8
 80009b8:	d003      	beq.n	80009c2 <Uart_Task+0x102>
 80009ba:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80009be:	2b7f      	cmp	r3, #127	@ 0x7f
 80009c0:	d188      	bne.n	80008d4 <Uart_Task+0x14>
            {
                if(index > 0)
 80009c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d084      	beq.n	80008d4 <Uart_Task+0x14>
                {
                    index--;
 80009ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80009ce:	3b01      	subs	r3, #1
 80009d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                    UART_Send_String("\b \b");
 80009d4:	4808      	ldr	r0, [pc, #32]	@ (80009f8 <Uart_Task+0x138>)
 80009d6:	f7ff ff31 	bl	800083c <UART_Send_String>
        if(HAL_UART_Receive(&huart2, &rxChar, 1, HAL_MAX_DELAY) == HAL_OK)
 80009da:	e77b      	b.n	80008d4 <Uart_Task+0x14>
 80009dc:	08005aec 	.word	0x08005aec
 80009e0:	2000007c 	.word	0x2000007c
 80009e4:	08005b1c 	.word	0x08005b1c
 80009e8:	200000c4 	.word	0x200000c4
 80009ec:	08005b20 	.word	0x08005b20
 80009f0:	08005b40 	.word	0x08005b40
 80009f4:	08005b6c 	.word	0x08005b6c
 80009f8:	08005b80 	.word	0x08005b80

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <Error_Handler+0x8>

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <HAL_MspInit+0x54>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	4a11      	ldr	r2, [pc, #68]	@ (8000a5c <HAL_MspInit+0x54>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <HAL_MspInit+0x54>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <HAL_MspInit+0x54>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <HAL_MspInit+0x54>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3a:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <HAL_MspInit+0x54>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	210f      	movs	r1, #15
 8000a4a:	f06f 0001 	mvn.w	r0, #1
 8000a4e:	f000 fa18 	bl	8000e82 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800

08000a60 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	@ 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a19      	ldr	r2, [pc, #100]	@ (8000ae4 <HAL_UART_MspInit+0x84>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d12b      	bne.n	8000ada <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b18      	ldr	r3, [pc, #96]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	4a17      	ldr	r2, [pc, #92]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a92:	4b15      	ldr	r3, [pc, #84]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a10      	ldr	r2, [pc, #64]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aba:	230c      	movs	r3, #12
 8000abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aca:	2307      	movs	r3, #7
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	@ (8000aec <HAL_UART_MspInit+0x8c>)
 8000ad6:	f000 f9fd 	bl	8000ed4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ada:	bf00      	nop
 8000adc:	3728      	adds	r7, #40	@ 0x28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40004400 	.word	0x40004400
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <NMI_Handler+0x4>

08000af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <MemManage_Handler+0x4>

08000b08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2a:	f000 f8cd 	bl	8000cc8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b2e:	f003 fa1b 	bl	8003f68 <xTaskGetSchedulerState>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d001      	beq.n	8000b3c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b38:	f004 f816 	bl	8004b68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b48:	4a14      	ldr	r2, [pc, #80]	@ (8000b9c <_sbrk+0x5c>)
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <_sbrk+0x60>)
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b54:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d102      	bne.n	8000b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <_sbrk+0x64>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ba8 <_sbrk+0x68>)
 8000b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b62:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d207      	bcs.n	8000b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b70:	f004 fb2c 	bl	80051cc <__errno>
 8000b74:	4603      	mov	r3, r0
 8000b76:	220c      	movs	r2, #12
 8000b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7e:	e009      	b.n	8000b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b80:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <_sbrk+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b86:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ba4 <_sbrk+0x64>)
 8000b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b92:	68fb      	ldr	r3, [r7, #12]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20018000 	.word	0x20018000
 8000ba0:	00000400 	.word	0x00000400
 8000ba4:	200000d0 	.word	0x200000d0
 8000ba8:	20004b70 	.word	0x20004b70

08000bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <SystemInit+0x20>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bb6:	4a05      	ldr	r2, [pc, #20]	@ (8000bcc <SystemInit+0x20>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bd4:	f7ff ffea 	bl	8000bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd8:	480c      	ldr	r0, [pc, #48]	@ (8000c0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bda:	490d      	ldr	r1, [pc, #52]	@ (8000c10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bf0:	4c0a      	ldr	r4, [pc, #40]	@ (8000c1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f004 faeb 	bl	80051d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c02:	f7ff fcdb 	bl	80005bc <main>
  bx  lr    
 8000c06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c14:	08005d40 	.word	0x08005d40
  ldr r2, =_sbss
 8000c18:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c1c:	20004b70 	.word	0x20004b70

08000c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC_IRQHandler>
	...

08000c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c28:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c64 <HAL_Init+0x40>)
 8000c2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c34:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0a      	ldr	r2, [pc, #40]	@ (8000c64 <HAL_Init+0x40>)
 8000c3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a07      	ldr	r2, [pc, #28]	@ (8000c64 <HAL_Init+0x40>)
 8000c46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f000 f90d 	bl	8000e6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c52:	200f      	movs	r0, #15
 8000c54:	f000 f808 	bl	8000c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c58:	f7ff fed6 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023c00 	.word	0x40023c00

08000c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c70:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <HAL_InitTick+0x54>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <HAL_InitTick+0x58>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f917 	bl	8000eba <HAL_SYSTICK_Config>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00e      	b.n	8000cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b0f      	cmp	r3, #15
 8000c9a:	d80a      	bhi.n	8000cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f000 f8ed 	bl	8000e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca8:	4a06      	ldr	r2, [pc, #24]	@ (8000cc4 <HAL_InitTick+0x5c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e000      	b.n	8000cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_IncTick+0x20>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_IncTick+0x24>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a04      	ldr	r2, [pc, #16]	@ (8000cec <HAL_IncTick+0x24>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	200000d4 	.word	0x200000d4

08000cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	@ (8000d04 <HAL_GetTick+0x14>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	200000d4 	.word	0x200000d4

08000d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	@ (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	60d3      	str	r3, [r2, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	@ (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	@ (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
         );
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	@ 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e38:	d301      	bcc.n	8000e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00f      	b.n	8000e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <SysTick_Config+0x40>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e46:	210f      	movs	r1, #15
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f7ff ff8e 	bl	8000d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e50:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <SysTick_Config+0x40>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e56:	4b04      	ldr	r3, [pc, #16]	@ (8000e68 <SysTick_Config+0x40>)
 8000e58:	2207      	movs	r2, #7
 8000e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	e000e010 	.word	0xe000e010

08000e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff ff47 	bl	8000d08 <__NVIC_SetPriorityGrouping>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b086      	sub	sp, #24
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	4603      	mov	r3, r0
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
 8000e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e94:	f7ff ff5c 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8000e98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	68b9      	ldr	r1, [r7, #8]
 8000e9e:	6978      	ldr	r0, [r7, #20]
 8000ea0:	f7ff ff8e 	bl	8000dc0 <NVIC_EncodePriority>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff5d 	bl	8000d6c <__NVIC_SetPriority>
}
 8000eb2:	bf00      	nop
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ffb0 	bl	8000e28 <SysTick_Config>
 8000ec8:	4603      	mov	r3, r0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	@ 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	e159      	b.n	80011a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	f040 8148 	bne.w	800119e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d005      	beq.n	8000f26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d130      	bne.n	8000f88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	091b      	lsrs	r3, r3, #4
 8000f72:	f003 0201 	and.w	r2, r3, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d017      	beq.n	8000fc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d123      	bne.n	8001018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	08da      	lsrs	r2, r3, #3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3208      	adds	r2, #8
 8000fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	08da      	lsrs	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3208      	adds	r2, #8
 8001012:	69b9      	ldr	r1, [r7, #24]
 8001014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0203 	and.w	r2, r3, #3
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80a2 	beq.w	800119e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b57      	ldr	r3, [pc, #348]	@ (80011bc <HAL_GPIO_Init+0x2e8>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	4a56      	ldr	r2, [pc, #344]	@ (80011bc <HAL_GPIO_Init+0x2e8>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001068:	6453      	str	r3, [r2, #68]	@ 0x44
 800106a:	4b54      	ldr	r3, [pc, #336]	@ (80011bc <HAL_GPIO_Init+0x2e8>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001076:	4a52      	ldr	r2, [pc, #328]	@ (80011c0 <HAL_GPIO_Init+0x2ec>)
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	3302      	adds	r3, #2
 800107e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	220f      	movs	r2, #15
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a49      	ldr	r2, [pc, #292]	@ (80011c4 <HAL_GPIO_Init+0x2f0>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d019      	beq.n	80010d6 <HAL_GPIO_Init+0x202>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a48      	ldr	r2, [pc, #288]	@ (80011c8 <HAL_GPIO_Init+0x2f4>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d013      	beq.n	80010d2 <HAL_GPIO_Init+0x1fe>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a47      	ldr	r2, [pc, #284]	@ (80011cc <HAL_GPIO_Init+0x2f8>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d00d      	beq.n	80010ce <HAL_GPIO_Init+0x1fa>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a46      	ldr	r2, [pc, #280]	@ (80011d0 <HAL_GPIO_Init+0x2fc>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d007      	beq.n	80010ca <HAL_GPIO_Init+0x1f6>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a45      	ldr	r2, [pc, #276]	@ (80011d4 <HAL_GPIO_Init+0x300>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d101      	bne.n	80010c6 <HAL_GPIO_Init+0x1f2>
 80010c2:	2304      	movs	r3, #4
 80010c4:	e008      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010c6:	2307      	movs	r3, #7
 80010c8:	e006      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010ca:	2303      	movs	r3, #3
 80010cc:	e004      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e002      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010d6:	2300      	movs	r3, #0
 80010d8:	69fa      	ldr	r2, [r7, #28]
 80010da:	f002 0203 	and.w	r2, r2, #3
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	4093      	lsls	r3, r2
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e8:	4935      	ldr	r1, [pc, #212]	@ (80011c0 <HAL_GPIO_Init+0x2ec>)
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	089b      	lsrs	r3, r3, #2
 80010ee:	3302      	adds	r3, #2
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010f6:	4b38      	ldr	r3, [pc, #224]	@ (80011d8 <HAL_GPIO_Init+0x304>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800111a:	4a2f      	ldr	r2, [pc, #188]	@ (80011d8 <HAL_GPIO_Init+0x304>)
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001120:	4b2d      	ldr	r3, [pc, #180]	@ (80011d8 <HAL_GPIO_Init+0x304>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001144:	4a24      	ldr	r2, [pc, #144]	@ (80011d8 <HAL_GPIO_Init+0x304>)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800114a:	4b23      	ldr	r3, [pc, #140]	@ (80011d8 <HAL_GPIO_Init+0x304>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800116e:	4a1a      	ldr	r2, [pc, #104]	@ (80011d8 <HAL_GPIO_Init+0x304>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001174:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <HAL_GPIO_Init+0x304>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001198:	4a0f      	ldr	r2, [pc, #60]	@ (80011d8 <HAL_GPIO_Init+0x304>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3301      	adds	r3, #1
 80011a2:	61fb      	str	r3, [r7, #28]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	2b0f      	cmp	r3, #15
 80011a8:	f67f aea2 	bls.w	8000ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3724      	adds	r7, #36	@ 0x24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40013800 	.word	0x40013800
 80011c4:	40020000 	.word	0x40020000
 80011c8:	40020400 	.word	0x40020400
 80011cc:	40020800 	.word	0x40020800
 80011d0:	40020c00 	.word	0x40020c00
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40013c00 	.word	0x40013c00

080011dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]
 80011e8:	4613      	mov	r3, r2
 80011ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ec:	787b      	ldrb	r3, [r7, #1]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f8:	e003      	b.n	8001202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011fa:	887b      	ldrh	r3, [r7, #2]
 80011fc:	041a      	lsls	r2, r3, #16
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	619a      	str	r2, [r3, #24]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800120e:	b480      	push	{r7}
 8001210:	b085      	sub	sp, #20
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	460b      	mov	r3, r1
 8001218:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001220:	887a      	ldrh	r2, [r7, #2]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4013      	ands	r3, r2
 8001226:	041a      	lsls	r2, r3, #16
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	43d9      	mvns	r1, r3
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	400b      	ands	r3, r1
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	619a      	str	r2, [r3, #24]
}
 8001236:	bf00      	nop
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e267      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d075      	beq.n	800134e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001262:	4b88      	ldr	r3, [pc, #544]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b04      	cmp	r3, #4
 800126c:	d00c      	beq.n	8001288 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126e:	4b85      	ldr	r3, [pc, #532]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001276:	2b08      	cmp	r3, #8
 8001278:	d112      	bne.n	80012a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127a:	4b82      	ldr	r3, [pc, #520]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001282:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001286:	d10b      	bne.n	80012a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	4b7e      	ldr	r3, [pc, #504]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d05b      	beq.n	800134c <HAL_RCC_OscConfig+0x108>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d157      	bne.n	800134c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e242      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012a8:	d106      	bne.n	80012b8 <HAL_RCC_OscConfig+0x74>
 80012aa:	4b76      	ldr	r3, [pc, #472]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a75      	ldr	r2, [pc, #468]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e01d      	b.n	80012f4 <HAL_RCC_OscConfig+0xb0>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012c0:	d10c      	bne.n	80012dc <HAL_RCC_OscConfig+0x98>
 80012c2:	4b70      	ldr	r3, [pc, #448]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6f      	ldr	r2, [pc, #444]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a6c      	ldr	r2, [pc, #432]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e00b      	b.n	80012f4 <HAL_RCC_OscConfig+0xb0>
 80012dc:	4b69      	ldr	r3, [pc, #420]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a68      	ldr	r2, [pc, #416]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b66      	ldr	r3, [pc, #408]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a65      	ldr	r2, [pc, #404]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d013      	beq.n	8001324 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fcf8 	bl	8000cf0 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fcf4 	bl	8000cf0 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	@ 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e207      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001316:	4b5b      	ldr	r3, [pc, #364]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0xc0>
 8001322:	e014      	b.n	800134e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7ff fce4 	bl	8000cf0 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fce0 	bl	8000cf0 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	@ 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e1f3      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133e:	4b51      	ldr	r3, [pc, #324]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f0      	bne.n	800132c <HAL_RCC_OscConfig+0xe8>
 800134a:	e000      	b.n	800134e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d063      	beq.n	8001422 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800135a:	4b4a      	ldr	r3, [pc, #296]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001366:	4b47      	ldr	r3, [pc, #284]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800136e:	2b08      	cmp	r3, #8
 8001370:	d11c      	bne.n	80013ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001372:	4b44      	ldr	r3, [pc, #272]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d116      	bne.n	80013ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137e:	4b41      	ldr	r3, [pc, #260]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <HAL_RCC_OscConfig+0x152>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d001      	beq.n	8001396 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e1c7      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	4b3b      	ldr	r3, [pc, #236]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4937      	ldr	r1, [pc, #220]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013aa:	e03a      	b.n	8001422 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d020      	beq.n	80013f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b4:	4b34      	ldr	r3, [pc, #208]	@ (8001488 <HAL_RCC_OscConfig+0x244>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ba:	f7ff fc99 	bl	8000cf0 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c2:	f7ff fc95 	bl	8000cf0 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e1a8      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e0:	4b28      	ldr	r3, [pc, #160]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4925      	ldr	r1, [pc, #148]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	600b      	str	r3, [r1, #0]
 80013f4:	e015      	b.n	8001422 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f6:	4b24      	ldr	r3, [pc, #144]	@ (8001488 <HAL_RCC_OscConfig+0x244>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fc:	f7ff fc78 	bl	8000cf0 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001404:	f7ff fc74 	bl	8000cf0 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e187      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001416:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d036      	beq.n	800149c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d016      	beq.n	8001464 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001436:	4b15      	ldr	r3, [pc, #84]	@ (800148c <HAL_RCC_OscConfig+0x248>)
 8001438:	2201      	movs	r2, #1
 800143a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143c:	f7ff fc58 	bl	8000cf0 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001444:	f7ff fc54 	bl	8000cf0 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e167      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001456:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x200>
 8001462:	e01b      	b.n	800149c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001464:	4b09      	ldr	r3, [pc, #36]	@ (800148c <HAL_RCC_OscConfig+0x248>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146a:	f7ff fc41 	bl	8000cf0 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001470:	e00e      	b.n	8001490 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001472:	f7ff fc3d 	bl	8000cf0 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d907      	bls.n	8001490 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e150      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
 8001484:	40023800 	.word	0x40023800
 8001488:	42470000 	.word	0x42470000
 800148c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001490:	4b88      	ldr	r3, [pc, #544]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1ea      	bne.n	8001472 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 8097 	beq.w	80015d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ae:	4b81      	ldr	r3, [pc, #516]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10f      	bne.n	80014da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	4b7d      	ldr	r3, [pc, #500]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	4a7c      	ldr	r2, [pc, #496]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ca:	4b7a      	ldr	r3, [pc, #488]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d6:	2301      	movs	r3, #1
 80014d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014da:	4b77      	ldr	r3, [pc, #476]	@ (80016b8 <HAL_RCC_OscConfig+0x474>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d118      	bne.n	8001518 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e6:	4b74      	ldr	r3, [pc, #464]	@ (80016b8 <HAL_RCC_OscConfig+0x474>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a73      	ldr	r2, [pc, #460]	@ (80016b8 <HAL_RCC_OscConfig+0x474>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f2:	f7ff fbfd 	bl	8000cf0 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fa:	f7ff fbf9 	bl	8000cf0 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e10c      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150c:	4b6a      	ldr	r3, [pc, #424]	@ (80016b8 <HAL_RCC_OscConfig+0x474>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d106      	bne.n	800152e <HAL_RCC_OscConfig+0x2ea>
 8001520:	4b64      	ldr	r3, [pc, #400]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001524:	4a63      	ldr	r2, [pc, #396]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6713      	str	r3, [r2, #112]	@ 0x70
 800152c:	e01c      	b.n	8001568 <HAL_RCC_OscConfig+0x324>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b05      	cmp	r3, #5
 8001534:	d10c      	bne.n	8001550 <HAL_RCC_OscConfig+0x30c>
 8001536:	4b5f      	ldr	r3, [pc, #380]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800153a:	4a5e      	ldr	r2, [pc, #376]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6713      	str	r3, [r2, #112]	@ 0x70
 8001542:	4b5c      	ldr	r3, [pc, #368]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001546:	4a5b      	ldr	r2, [pc, #364]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6713      	str	r3, [r2, #112]	@ 0x70
 800154e:	e00b      	b.n	8001568 <HAL_RCC_OscConfig+0x324>
 8001550:	4b58      	ldr	r3, [pc, #352]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001554:	4a57      	ldr	r2, [pc, #348]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001556:	f023 0301 	bic.w	r3, r3, #1
 800155a:	6713      	str	r3, [r2, #112]	@ 0x70
 800155c:	4b55      	ldr	r3, [pc, #340]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 800155e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001560:	4a54      	ldr	r2, [pc, #336]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001562:	f023 0304 	bic.w	r3, r3, #4
 8001566:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d015      	beq.n	800159c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001570:	f7ff fbbe 	bl	8000cf0 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001576:	e00a      	b.n	800158e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001578:	f7ff fbba 	bl	8000cf0 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001586:	4293      	cmp	r3, r2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e0cb      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158e:	4b49      	ldr	r3, [pc, #292]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0ee      	beq.n	8001578 <HAL_RCC_OscConfig+0x334>
 800159a:	e014      	b.n	80015c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159c:	f7ff fba8 	bl	8000cf0 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a2:	e00a      	b.n	80015ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a4:	f7ff fba4 	bl	8000cf0 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e0b5      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ba:	4b3e      	ldr	r3, [pc, #248]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1ee      	bne.n	80015a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d105      	bne.n	80015d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015cc:	4b39      	ldr	r3, [pc, #228]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d0:	4a38      	ldr	r2, [pc, #224]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80a1 	beq.w	8001724 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015e2:	4b34      	ldr	r3, [pc, #208]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d05c      	beq.n	80016a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d141      	bne.n	800167a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f6:	4b31      	ldr	r3, [pc, #196]	@ (80016bc <HAL_RCC_OscConfig+0x478>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fb78 	bl	8000cf0 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001604:	f7ff fb74 	bl	8000cf0 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e087      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001616:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69da      	ldr	r2, [r3, #28]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001630:	019b      	lsls	r3, r3, #6
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001638:	085b      	lsrs	r3, r3, #1
 800163a:	3b01      	subs	r3, #1
 800163c:	041b      	lsls	r3, r3, #16
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001644:	061b      	lsls	r3, r3, #24
 8001646:	491b      	ldr	r1, [pc, #108]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800164c:	4b1b      	ldr	r3, [pc, #108]	@ (80016bc <HAL_RCC_OscConfig+0x478>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7ff fb4d 	bl	8000cf0 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165a:	f7ff fb49 	bl	8000cf0 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e05c      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166c:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x416>
 8001678:	e054      	b.n	8001724 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167a:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <HAL_RCC_OscConfig+0x478>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fb36 	bl	8000cf0 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fb32 	bl	8000cf0 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e045      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169a:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x444>
 80016a6:	e03d      	b.n	8001724 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d107      	bne.n	80016c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e038      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40007000 	.word	0x40007000
 80016bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001730 <HAL_RCC_OscConfig+0x4ec>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d028      	beq.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d121      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d11a      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016f0:	4013      	ands	r3, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d111      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001706:	085b      	lsrs	r3, r3, #1
 8001708:	3b01      	subs	r3, #1
 800170a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d107      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800

08001734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0cc      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001748:	4b68      	ldr	r3, [pc, #416]	@ (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d90c      	bls.n	8001770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4b65      	ldr	r3, [pc, #404]	@ (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	4b63      	ldr	r3, [pc, #396]	@ (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0b8      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d020      	beq.n	80017be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001788:	4b59      	ldr	r3, [pc, #356]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4a58      	ldr	r2, [pc, #352]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001792:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a0:	4b53      	ldr	r3, [pc, #332]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4a52      	ldr	r2, [pc, #328]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ac:	4b50      	ldr	r3, [pc, #320]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	494d      	ldr	r1, [pc, #308]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d044      	beq.n	8001854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	4b47      	ldr	r3, [pc, #284]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d119      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e07f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d003      	beq.n	80017f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f2:	4b3f      	ldr	r3, [pc, #252]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d109      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e06f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001802:	4b3b      	ldr	r3, [pc, #236]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e067      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001812:	4b37      	ldr	r3, [pc, #220]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f023 0203 	bic.w	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4934      	ldr	r1, [pc, #208]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	4313      	orrs	r3, r2
 8001822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001824:	f7ff fa64 	bl	8000cf0 <HAL_GetTick>
 8001828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	e00a      	b.n	8001842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182c:	f7ff fa60 	bl	8000cf0 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e04f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	4b2b      	ldr	r3, [pc, #172]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 020c 	and.w	r2, r3, #12
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	429a      	cmp	r2, r3
 8001852:	d1eb      	bne.n	800182c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001854:	4b25      	ldr	r3, [pc, #148]	@ (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d20c      	bcs.n	800187c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	4b22      	ldr	r3, [pc, #136]	@ (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e032      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001888:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4916      	ldr	r1, [pc, #88]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a6:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	490e      	ldr	r1, [pc, #56]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ba:	f000 f821 	bl	8001900 <HAL_RCC_GetSysClockFreq>
 80018be:	4602      	mov	r2, r0
 80018c0:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	490a      	ldr	r1, [pc, #40]	@ (80018f4 <HAL_RCC_ClockConfig+0x1c0>)
 80018cc:	5ccb      	ldrb	r3, [r1, r3]
 80018ce:	fa22 f303 	lsr.w	r3, r2, r3
 80018d2:	4a09      	ldr	r2, [pc, #36]	@ (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018d6:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <HAL_RCC_ClockConfig+0x1c8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f9c4 	bl	8000c68 <HAL_InitTick>

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023c00 	.word	0x40023c00
 80018f0:	40023800 	.word	0x40023800
 80018f4:	08005be4 	.word	0x08005be4
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000004 	.word	0x20000004

08001900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001904:	b094      	sub	sp, #80	@ 0x50
 8001906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001918:	4b79      	ldr	r3, [pc, #484]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b08      	cmp	r3, #8
 8001922:	d00d      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x40>
 8001924:	2b08      	cmp	r3, #8
 8001926:	f200 80e1 	bhi.w	8001aec <HAL_RCC_GetSysClockFreq+0x1ec>
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x34>
 800192e:	2b04      	cmp	r3, #4
 8001930:	d003      	beq.n	800193a <HAL_RCC_GetSysClockFreq+0x3a>
 8001932:	e0db      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001934:	4b73      	ldr	r3, [pc, #460]	@ (8001b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8001936:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001938:	e0db      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800193a:	4b73      	ldr	r3, [pc, #460]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x208>)
 800193c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800193e:	e0d8      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001940:	4b6f      	ldr	r3, [pc, #444]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001948:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800194a:	4b6d      	ldr	r3, [pc, #436]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d063      	beq.n	8001a1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001956:	4b6a      	ldr	r3, [pc, #424]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	099b      	lsrs	r3, r3, #6
 800195c:	2200      	movs	r2, #0
 800195e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001960:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001968:	633b      	str	r3, [r7, #48]	@ 0x30
 800196a:	2300      	movs	r3, #0
 800196c:	637b      	str	r3, [r7, #52]	@ 0x34
 800196e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001972:	4622      	mov	r2, r4
 8001974:	462b      	mov	r3, r5
 8001976:	f04f 0000 	mov.w	r0, #0
 800197a:	f04f 0100 	mov.w	r1, #0
 800197e:	0159      	lsls	r1, r3, #5
 8001980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001984:	0150      	lsls	r0, r2, #5
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4621      	mov	r1, r4
 800198c:	1a51      	subs	r1, r2, r1
 800198e:	6139      	str	r1, [r7, #16]
 8001990:	4629      	mov	r1, r5
 8001992:	eb63 0301 	sbc.w	r3, r3, r1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019a4:	4659      	mov	r1, fp
 80019a6:	018b      	lsls	r3, r1, #6
 80019a8:	4651      	mov	r1, sl
 80019aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ae:	4651      	mov	r1, sl
 80019b0:	018a      	lsls	r2, r1, #6
 80019b2:	4651      	mov	r1, sl
 80019b4:	ebb2 0801 	subs.w	r8, r2, r1
 80019b8:	4659      	mov	r1, fp
 80019ba:	eb63 0901 	sbc.w	r9, r3, r1
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019d2:	4690      	mov	r8, r2
 80019d4:	4699      	mov	r9, r3
 80019d6:	4623      	mov	r3, r4
 80019d8:	eb18 0303 	adds.w	r3, r8, r3
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	462b      	mov	r3, r5
 80019e0:	eb49 0303 	adc.w	r3, r9, r3
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019f2:	4629      	mov	r1, r5
 80019f4:	024b      	lsls	r3, r1, #9
 80019f6:	4621      	mov	r1, r4
 80019f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019fc:	4621      	mov	r1, r4
 80019fe:	024a      	lsls	r2, r1, #9
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a06:	2200      	movs	r2, #0
 8001a08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a10:	f7fe fc3e 	bl	8000290 <__aeabi_uldivmod>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4613      	mov	r3, r2
 8001a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a1c:	e058      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a1e:	4b38      	ldr	r3, [pc, #224]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	099b      	lsrs	r3, r3, #6
 8001a24:	2200      	movs	r2, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	4611      	mov	r1, r2
 8001a2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a2e:	623b      	str	r3, [r7, #32]
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a38:	4642      	mov	r2, r8
 8001a3a:	464b      	mov	r3, r9
 8001a3c:	f04f 0000 	mov.w	r0, #0
 8001a40:	f04f 0100 	mov.w	r1, #0
 8001a44:	0159      	lsls	r1, r3, #5
 8001a46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a4a:	0150      	lsls	r0, r2, #5
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4641      	mov	r1, r8
 8001a52:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a56:	4649      	mov	r1, r9
 8001a58:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a70:	ebb2 040a 	subs.w	r4, r2, sl
 8001a74:	eb63 050b 	sbc.w	r5, r3, fp
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	00eb      	lsls	r3, r5, #3
 8001a82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a86:	00e2      	lsls	r2, r4, #3
 8001a88:	4614      	mov	r4, r2
 8001a8a:	461d      	mov	r5, r3
 8001a8c:	4643      	mov	r3, r8
 8001a8e:	18e3      	adds	r3, r4, r3
 8001a90:	603b      	str	r3, [r7, #0]
 8001a92:	464b      	mov	r3, r9
 8001a94:	eb45 0303 	adc.w	r3, r5, r3
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	028b      	lsls	r3, r1, #10
 8001aaa:	4621      	mov	r1, r4
 8001aac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	028a      	lsls	r2, r1, #10
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aba:	2200      	movs	r2, #0
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	61fa      	str	r2, [r7, #28]
 8001ac0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ac4:	f7fe fbe4 	bl	8000290 <__aeabi_uldivmod>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4613      	mov	r3, r2
 8001ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	0c1b      	lsrs	r3, r3, #16
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	3301      	adds	r3, #1
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ae0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001aea:	e002      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aec:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3750      	adds	r7, #80	@ 0x50
 8001af8:	46bd      	mov	sp, r7
 8001afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800
 8001b04:	00f42400 	.word	0x00f42400
 8001b08:	007a1200 	.word	0x007a1200

08001b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b10:	4b03      	ldr	r3, [pc, #12]	@ (8001b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000000 	.word	0x20000000

08001b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b28:	f7ff fff0 	bl	8001b0c <HAL_RCC_GetHCLKFreq>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	0a9b      	lsrs	r3, r3, #10
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	4903      	ldr	r1, [pc, #12]	@ (8001b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b3a:	5ccb      	ldrb	r3, [r1, r3]
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800
 8001b48:	08005bf4 	.word	0x08005bf4

08001b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b50:	f7ff ffdc 	bl	8001b0c <HAL_RCC_GetHCLKFreq>
 8001b54:	4602      	mov	r2, r0
 8001b56:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	0b5b      	lsrs	r3, r3, #13
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	4903      	ldr	r1, [pc, #12]	@ (8001b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b62:	5ccb      	ldrb	r3, [r1, r3]
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	08005bf4 	.word	0x08005bf4

08001b74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e042      	b.n	8001c0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d106      	bne.n	8001ba0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7fe ff60 	bl	8000a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2224      	movs	r2, #36	@ 0x24
 8001ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001bb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 fa09 	bl	8001fd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001bcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695a      	ldr	r2, [r3, #20]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001bdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001bec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	@ 0x28
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	4613      	mov	r3, r2
 8001c22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b20      	cmp	r3, #32
 8001c32:	d175      	bne.n	8001d20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <HAL_UART_Transmit+0x2c>
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e06e      	b.n	8001d22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2221      	movs	r2, #33	@ 0x21
 8001c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c52:	f7ff f84d 	bl	8000cf0 <HAL_GetTick>
 8001c56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	88fa      	ldrh	r2, [r7, #6]
 8001c5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	88fa      	ldrh	r2, [r7, #6]
 8001c62:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c6c:	d108      	bne.n	8001c80 <HAL_UART_Transmit+0x6c>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d104      	bne.n	8001c80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	61bb      	str	r3, [r7, #24]
 8001c7e:	e003      	b.n	8001c88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c88:	e02e      	b.n	8001ce8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2200      	movs	r2, #0
 8001c92:	2180      	movs	r1, #128	@ 0x80
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 f8df 	bl	8001e58 <UART_WaitOnFlagUntilTimeout>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e03a      	b.n	8001d22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10b      	bne.n	8001cca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	61bb      	str	r3, [r7, #24]
 8001cc8:	e007      	b.n	8001cda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	781a      	ldrb	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1cb      	bne.n	8001c8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2140      	movs	r1, #64	@ 0x40
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f000 f8ab 	bl	8001e58 <UART_WaitOnFlagUntilTimeout>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e006      	b.n	8001d22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e000      	b.n	8001d22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001d20:	2302      	movs	r3, #2
  }
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3720      	adds	r7, #32
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b08a      	sub	sp, #40	@ 0x28
 8001d2e:	af02      	add	r7, sp, #8
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	603b      	str	r3, [r7, #0]
 8001d36:	4613      	mov	r3, r2
 8001d38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b20      	cmp	r3, #32
 8001d48:	f040 8081 	bne.w	8001e4e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <HAL_UART_Receive+0x2e>
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e079      	b.n	8001e50 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2222      	movs	r2, #34	@ 0x22
 8001d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d70:	f7fe ffbe 	bl	8000cf0 <HAL_GetTick>
 8001d74:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	88fa      	ldrh	r2, [r7, #6]
 8001d7a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	88fa      	ldrh	r2, [r7, #6]
 8001d80:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d8a:	d108      	bne.n	8001d9e <HAL_UART_Receive+0x74>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d104      	bne.n	8001d9e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	61bb      	str	r3, [r7, #24]
 8001d9c:	e003      	b.n	8001da6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001da6:	e047      	b.n	8001e38 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	2200      	movs	r2, #0
 8001db0:	2120      	movs	r1, #32
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f850 	bl	8001e58 <UART_WaitOnFlagUntilTimeout>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d005      	beq.n	8001dca <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e042      	b.n	8001e50 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10c      	bne.n	8001dea <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	3302      	adds	r3, #2
 8001de6:	61bb      	str	r3, [r7, #24]
 8001de8:	e01f      	b.n	8001e2a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001df2:	d007      	beq.n	8001e04 <HAL_UART_Receive+0xda>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10a      	bne.n	8001e12 <HAL_UART_Receive+0xe8>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d106      	bne.n	8001e12 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	701a      	strb	r2, [r3, #0]
 8001e10:	e008      	b.n	8001e24 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	3301      	adds	r3, #1
 8001e28:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1b2      	bne.n	8001da8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2220      	movs	r2, #32
 8001e46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e000      	b.n	8001e50 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001e4e:	2302      	movs	r3, #2
  }
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3720      	adds	r7, #32
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	4613      	mov	r3, r2
 8001e66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e68:	e03b      	b.n	8001ee2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d037      	beq.n	8001ee2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e72:	f7fe ff3d 	bl	8000cf0 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	6a3a      	ldr	r2, [r7, #32]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d302      	bcc.n	8001e88 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e03a      	b.n	8001f02 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d023      	beq.n	8001ee2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2b80      	cmp	r3, #128	@ 0x80
 8001e9e:	d020      	beq.n	8001ee2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b40      	cmp	r3, #64	@ 0x40
 8001ea4:	d01d      	beq.n	8001ee2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d116      	bne.n	8001ee2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f81d 	bl	8001f0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2208      	movs	r2, #8
 8001ed4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00f      	b.n	8001f02 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4013      	ands	r3, r2
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	bf0c      	ite	eq
 8001ef2:	2301      	moveq	r3, #1
 8001ef4:	2300      	movne	r3, #0
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d0b4      	beq.n	8001e6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b095      	sub	sp, #84	@ 0x54
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	330c      	adds	r3, #12
 8001f18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f1c:	e853 3f00 	ldrex	r3, [r3]
 8001f20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	330c      	adds	r3, #12
 8001f30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f32:	643a      	str	r2, [r7, #64]	@ 0x40
 8001f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001f38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f3a:	e841 2300 	strex	r3, r2, [r1]
 8001f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1e5      	bne.n	8001f12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	3314      	adds	r3, #20
 8001f4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	e853 3f00 	ldrex	r3, [r3]
 8001f54:	61fb      	str	r3, [r7, #28]
   return(result);
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	f023 0301 	bic.w	r3, r3, #1
 8001f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	3314      	adds	r3, #20
 8001f64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f6e:	e841 2300 	strex	r3, r2, [r1]
 8001f72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1e5      	bne.n	8001f46 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d119      	bne.n	8001fb6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	330c      	adds	r3, #12
 8001f88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	e853 3f00 	ldrex	r3, [r3]
 8001f90:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	f023 0310 	bic.w	r3, r3, #16
 8001f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	330c      	adds	r3, #12
 8001fa0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001fa2:	61ba      	str	r2, [r7, #24]
 8001fa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fa6:	6979      	ldr	r1, [r7, #20]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	e841 2300 	strex	r3, r2, [r1]
 8001fae:	613b      	str	r3, [r7, #16]
   return(result);
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1e5      	bne.n	8001f82 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001fc4:	bf00      	nop
 8001fc6:	3754      	adds	r7, #84	@ 0x54
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fd4:	b0c0      	sub	sp, #256	@ 0x100
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fec:	68d9      	ldr	r1, [r3, #12]
 8001fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	ea40 0301 	orr.w	r3, r0, r1
 8001ff8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	431a      	orrs	r2, r3
 8002008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	431a      	orrs	r2, r3
 8002010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	4313      	orrs	r3, r2
 8002018:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800201c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002028:	f021 010c 	bic.w	r1, r1, #12
 800202c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002036:	430b      	orrs	r3, r1
 8002038:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800203a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800204a:	6999      	ldr	r1, [r3, #24]
 800204c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	ea40 0301 	orr.w	r3, r0, r1
 8002056:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	4b8f      	ldr	r3, [pc, #572]	@ (800229c <UART_SetConfig+0x2cc>)
 8002060:	429a      	cmp	r2, r3
 8002062:	d005      	beq.n	8002070 <UART_SetConfig+0xa0>
 8002064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4b8d      	ldr	r3, [pc, #564]	@ (80022a0 <UART_SetConfig+0x2d0>)
 800206c:	429a      	cmp	r2, r3
 800206e:	d104      	bne.n	800207a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002070:	f7ff fd6c 	bl	8001b4c <HAL_RCC_GetPCLK2Freq>
 8002074:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002078:	e003      	b.n	8002082 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800207a:	f7ff fd53 	bl	8001b24 <HAL_RCC_GetPCLK1Freq>
 800207e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800208c:	f040 810c 	bne.w	80022a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002094:	2200      	movs	r2, #0
 8002096:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800209a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800209e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80020a2:	4622      	mov	r2, r4
 80020a4:	462b      	mov	r3, r5
 80020a6:	1891      	adds	r1, r2, r2
 80020a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80020aa:	415b      	adcs	r3, r3
 80020ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80020ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80020b2:	4621      	mov	r1, r4
 80020b4:	eb12 0801 	adds.w	r8, r2, r1
 80020b8:	4629      	mov	r1, r5
 80020ba:	eb43 0901 	adc.w	r9, r3, r1
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020d2:	4690      	mov	r8, r2
 80020d4:	4699      	mov	r9, r3
 80020d6:	4623      	mov	r3, r4
 80020d8:	eb18 0303 	adds.w	r3, r8, r3
 80020dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80020e0:	462b      	mov	r3, r5
 80020e2:	eb49 0303 	adc.w	r3, r9, r3
 80020e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80020ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80020f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80020fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80020fe:	460b      	mov	r3, r1
 8002100:	18db      	adds	r3, r3, r3
 8002102:	653b      	str	r3, [r7, #80]	@ 0x50
 8002104:	4613      	mov	r3, r2
 8002106:	eb42 0303 	adc.w	r3, r2, r3
 800210a:	657b      	str	r3, [r7, #84]	@ 0x54
 800210c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002110:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002114:	f7fe f8bc 	bl	8000290 <__aeabi_uldivmod>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4b61      	ldr	r3, [pc, #388]	@ (80022a4 <UART_SetConfig+0x2d4>)
 800211e:	fba3 2302 	umull	r2, r3, r3, r2
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	011c      	lsls	r4, r3, #4
 8002126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800212a:	2200      	movs	r2, #0
 800212c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002130:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002134:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002138:	4642      	mov	r2, r8
 800213a:	464b      	mov	r3, r9
 800213c:	1891      	adds	r1, r2, r2
 800213e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002140:	415b      	adcs	r3, r3
 8002142:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002144:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002148:	4641      	mov	r1, r8
 800214a:	eb12 0a01 	adds.w	sl, r2, r1
 800214e:	4649      	mov	r1, r9
 8002150:	eb43 0b01 	adc.w	fp, r3, r1
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002160:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002164:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002168:	4692      	mov	sl, r2
 800216a:	469b      	mov	fp, r3
 800216c:	4643      	mov	r3, r8
 800216e:	eb1a 0303 	adds.w	r3, sl, r3
 8002172:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002176:	464b      	mov	r3, r9
 8002178:	eb4b 0303 	adc.w	r3, fp, r3
 800217c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800218c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002190:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002194:	460b      	mov	r3, r1
 8002196:	18db      	adds	r3, r3, r3
 8002198:	643b      	str	r3, [r7, #64]	@ 0x40
 800219a:	4613      	mov	r3, r2
 800219c:	eb42 0303 	adc.w	r3, r2, r3
 80021a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80021a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80021a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80021aa:	f7fe f871 	bl	8000290 <__aeabi_uldivmod>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4611      	mov	r1, r2
 80021b4:	4b3b      	ldr	r3, [pc, #236]	@ (80022a4 <UART_SetConfig+0x2d4>)
 80021b6:	fba3 2301 	umull	r2, r3, r3, r1
 80021ba:	095b      	lsrs	r3, r3, #5
 80021bc:	2264      	movs	r2, #100	@ 0x64
 80021be:	fb02 f303 	mul.w	r3, r2, r3
 80021c2:	1acb      	subs	r3, r1, r3
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80021ca:	4b36      	ldr	r3, [pc, #216]	@ (80022a4 <UART_SetConfig+0x2d4>)
 80021cc:	fba3 2302 	umull	r2, r3, r3, r2
 80021d0:	095b      	lsrs	r3, r3, #5
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80021d8:	441c      	add	r4, r3
 80021da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021de:	2200      	movs	r2, #0
 80021e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80021e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80021e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80021ec:	4642      	mov	r2, r8
 80021ee:	464b      	mov	r3, r9
 80021f0:	1891      	adds	r1, r2, r2
 80021f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80021f4:	415b      	adcs	r3, r3
 80021f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80021fc:	4641      	mov	r1, r8
 80021fe:	1851      	adds	r1, r2, r1
 8002200:	6339      	str	r1, [r7, #48]	@ 0x30
 8002202:	4649      	mov	r1, r9
 8002204:	414b      	adcs	r3, r1
 8002206:	637b      	str	r3, [r7, #52]	@ 0x34
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	f04f 0300 	mov.w	r3, #0
 8002210:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002214:	4659      	mov	r1, fp
 8002216:	00cb      	lsls	r3, r1, #3
 8002218:	4651      	mov	r1, sl
 800221a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800221e:	4651      	mov	r1, sl
 8002220:	00ca      	lsls	r2, r1, #3
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	4603      	mov	r3, r0
 8002228:	4642      	mov	r2, r8
 800222a:	189b      	adds	r3, r3, r2
 800222c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002230:	464b      	mov	r3, r9
 8002232:	460a      	mov	r2, r1
 8002234:	eb42 0303 	adc.w	r3, r2, r3
 8002238:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800223c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002248:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800224c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002250:	460b      	mov	r3, r1
 8002252:	18db      	adds	r3, r3, r3
 8002254:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002256:	4613      	mov	r3, r2
 8002258:	eb42 0303 	adc.w	r3, r2, r3
 800225c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800225e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002262:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002266:	f7fe f813 	bl	8000290 <__aeabi_uldivmod>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4b0d      	ldr	r3, [pc, #52]	@ (80022a4 <UART_SetConfig+0x2d4>)
 8002270:	fba3 1302 	umull	r1, r3, r3, r2
 8002274:	095b      	lsrs	r3, r3, #5
 8002276:	2164      	movs	r1, #100	@ 0x64
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	3332      	adds	r3, #50	@ 0x32
 8002282:	4a08      	ldr	r2, [pc, #32]	@ (80022a4 <UART_SetConfig+0x2d4>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	095b      	lsrs	r3, r3, #5
 800228a:	f003 0207 	and.w	r2, r3, #7
 800228e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4422      	add	r2, r4
 8002296:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002298:	e106      	b.n	80024a8 <UART_SetConfig+0x4d8>
 800229a:	bf00      	nop
 800229c:	40011000 	.word	0x40011000
 80022a0:	40011400 	.word	0x40011400
 80022a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022ac:	2200      	movs	r2, #0
 80022ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80022b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80022b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80022ba:	4642      	mov	r2, r8
 80022bc:	464b      	mov	r3, r9
 80022be:	1891      	adds	r1, r2, r2
 80022c0:	6239      	str	r1, [r7, #32]
 80022c2:	415b      	adcs	r3, r3
 80022c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80022c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022ca:	4641      	mov	r1, r8
 80022cc:	1854      	adds	r4, r2, r1
 80022ce:	4649      	mov	r1, r9
 80022d0:	eb43 0501 	adc.w	r5, r3, r1
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	00eb      	lsls	r3, r5, #3
 80022de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022e2:	00e2      	lsls	r2, r4, #3
 80022e4:	4614      	mov	r4, r2
 80022e6:	461d      	mov	r5, r3
 80022e8:	4643      	mov	r3, r8
 80022ea:	18e3      	adds	r3, r4, r3
 80022ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80022f0:	464b      	mov	r3, r9
 80022f2:	eb45 0303 	adc.w	r3, r5, r3
 80022f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80022fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002306:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002316:	4629      	mov	r1, r5
 8002318:	008b      	lsls	r3, r1, #2
 800231a:	4621      	mov	r1, r4
 800231c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002320:	4621      	mov	r1, r4
 8002322:	008a      	lsls	r2, r1, #2
 8002324:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002328:	f7fd ffb2 	bl	8000290 <__aeabi_uldivmod>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4b60      	ldr	r3, [pc, #384]	@ (80024b4 <UART_SetConfig+0x4e4>)
 8002332:	fba3 2302 	umull	r2, r3, r3, r2
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	011c      	lsls	r4, r3, #4
 800233a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800233e:	2200      	movs	r2, #0
 8002340:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002344:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002348:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800234c:	4642      	mov	r2, r8
 800234e:	464b      	mov	r3, r9
 8002350:	1891      	adds	r1, r2, r2
 8002352:	61b9      	str	r1, [r7, #24]
 8002354:	415b      	adcs	r3, r3
 8002356:	61fb      	str	r3, [r7, #28]
 8002358:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800235c:	4641      	mov	r1, r8
 800235e:	1851      	adds	r1, r2, r1
 8002360:	6139      	str	r1, [r7, #16]
 8002362:	4649      	mov	r1, r9
 8002364:	414b      	adcs	r3, r1
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	f04f 0300 	mov.w	r3, #0
 8002370:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002374:	4659      	mov	r1, fp
 8002376:	00cb      	lsls	r3, r1, #3
 8002378:	4651      	mov	r1, sl
 800237a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800237e:	4651      	mov	r1, sl
 8002380:	00ca      	lsls	r2, r1, #3
 8002382:	4610      	mov	r0, r2
 8002384:	4619      	mov	r1, r3
 8002386:	4603      	mov	r3, r0
 8002388:	4642      	mov	r2, r8
 800238a:	189b      	adds	r3, r3, r2
 800238c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002390:	464b      	mov	r3, r9
 8002392:	460a      	mov	r2, r1
 8002394:	eb42 0303 	adc.w	r3, r2, r3
 8002398:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800239c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80023a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80023b4:	4649      	mov	r1, r9
 80023b6:	008b      	lsls	r3, r1, #2
 80023b8:	4641      	mov	r1, r8
 80023ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023be:	4641      	mov	r1, r8
 80023c0:	008a      	lsls	r2, r1, #2
 80023c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80023c6:	f7fd ff63 	bl	8000290 <__aeabi_uldivmod>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	4611      	mov	r1, r2
 80023d0:	4b38      	ldr	r3, [pc, #224]	@ (80024b4 <UART_SetConfig+0x4e4>)
 80023d2:	fba3 2301 	umull	r2, r3, r3, r1
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	2264      	movs	r2, #100	@ 0x64
 80023da:	fb02 f303 	mul.w	r3, r2, r3
 80023de:	1acb      	subs	r3, r1, r3
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	3332      	adds	r3, #50	@ 0x32
 80023e4:	4a33      	ldr	r2, [pc, #204]	@ (80024b4 <UART_SetConfig+0x4e4>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023f0:	441c      	add	r4, r3
 80023f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023f6:	2200      	movs	r2, #0
 80023f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80023fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80023fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002400:	4642      	mov	r2, r8
 8002402:	464b      	mov	r3, r9
 8002404:	1891      	adds	r1, r2, r2
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	415b      	adcs	r3, r3
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002410:	4641      	mov	r1, r8
 8002412:	1851      	adds	r1, r2, r1
 8002414:	6039      	str	r1, [r7, #0]
 8002416:	4649      	mov	r1, r9
 8002418:	414b      	adcs	r3, r1
 800241a:	607b      	str	r3, [r7, #4]
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002428:	4659      	mov	r1, fp
 800242a:	00cb      	lsls	r3, r1, #3
 800242c:	4651      	mov	r1, sl
 800242e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002432:	4651      	mov	r1, sl
 8002434:	00ca      	lsls	r2, r1, #3
 8002436:	4610      	mov	r0, r2
 8002438:	4619      	mov	r1, r3
 800243a:	4603      	mov	r3, r0
 800243c:	4642      	mov	r2, r8
 800243e:	189b      	adds	r3, r3, r2
 8002440:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002442:	464b      	mov	r3, r9
 8002444:	460a      	mov	r2, r1
 8002446:	eb42 0303 	adc.w	r3, r2, r3
 800244a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800244c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	663b      	str	r3, [r7, #96]	@ 0x60
 8002456:	667a      	str	r2, [r7, #100]	@ 0x64
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002464:	4649      	mov	r1, r9
 8002466:	008b      	lsls	r3, r1, #2
 8002468:	4641      	mov	r1, r8
 800246a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800246e:	4641      	mov	r1, r8
 8002470:	008a      	lsls	r2, r1, #2
 8002472:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002476:	f7fd ff0b 	bl	8000290 <__aeabi_uldivmod>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4b0d      	ldr	r3, [pc, #52]	@ (80024b4 <UART_SetConfig+0x4e4>)
 8002480:	fba3 1302 	umull	r1, r3, r3, r2
 8002484:	095b      	lsrs	r3, r3, #5
 8002486:	2164      	movs	r1, #100	@ 0x64
 8002488:	fb01 f303 	mul.w	r3, r1, r3
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	3332      	adds	r3, #50	@ 0x32
 8002492:	4a08      	ldr	r2, [pc, #32]	@ (80024b4 <UART_SetConfig+0x4e4>)
 8002494:	fba2 2303 	umull	r2, r3, r2, r3
 8002498:	095b      	lsrs	r3, r3, #5
 800249a:	f003 020f 	and.w	r2, r3, #15
 800249e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4422      	add	r2, r4
 80024a6:	609a      	str	r2, [r3, #8]
}
 80024a8:	bf00      	nop
 80024aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80024ae:	46bd      	mov	sp, r7
 80024b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024b4:	51eb851f 	.word	0x51eb851f

080024b8 <__NVIC_SetPriority>:
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	6039      	str	r1, [r7, #0]
 80024c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	db0a      	blt.n	80024e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	490c      	ldr	r1, [pc, #48]	@ (8002504 <__NVIC_SetPriority+0x4c>)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	0112      	lsls	r2, r2, #4
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	440b      	add	r3, r1
 80024dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80024e0:	e00a      	b.n	80024f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4908      	ldr	r1, [pc, #32]	@ (8002508 <__NVIC_SetPriority+0x50>)
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	3b04      	subs	r3, #4
 80024f0:	0112      	lsls	r2, r2, #4
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	440b      	add	r3, r1
 80024f6:	761a      	strb	r2, [r3, #24]
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000e100 	.word	0xe000e100
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002510:	2100      	movs	r1, #0
 8002512:	f06f 0004 	mvn.w	r0, #4
 8002516:	f7ff ffcf 	bl	80024b8 <__NVIC_SetPriority>
#endif
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002526:	f3ef 8305 	mrs	r3, IPSR
 800252a:	603b      	str	r3, [r7, #0]
  return(result);
 800252c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002532:	f06f 0305 	mvn.w	r3, #5
 8002536:	607b      	str	r3, [r7, #4]
 8002538:	e00c      	b.n	8002554 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800253a:	4b0a      	ldr	r3, [pc, #40]	@ (8002564 <osKernelInitialize+0x44>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d105      	bne.n	800254e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002542:	4b08      	ldr	r3, [pc, #32]	@ (8002564 <osKernelInitialize+0x44>)
 8002544:	2201      	movs	r2, #1
 8002546:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002548:	2300      	movs	r3, #0
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	e002      	b.n	8002554 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800254e:	f04f 33ff 	mov.w	r3, #4294967295
 8002552:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002554:	687b      	ldr	r3, [r7, #4]
}
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	200000d8 	.word	0x200000d8

08002568 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800256e:	f3ef 8305 	mrs	r3, IPSR
 8002572:	603b      	str	r3, [r7, #0]
  return(result);
 8002574:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <osKernelStart+0x1a>
    stat = osErrorISR;
 800257a:	f06f 0305 	mvn.w	r3, #5
 800257e:	607b      	str	r3, [r7, #4]
 8002580:	e010      	b.n	80025a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002582:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <osKernelStart+0x48>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d109      	bne.n	800259e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800258a:	f7ff ffbf 	bl	800250c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800258e:	4b08      	ldr	r3, [pc, #32]	@ (80025b0 <osKernelStart+0x48>)
 8002590:	2202      	movs	r2, #2
 8002592:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002594:	f001 f89a 	bl	80036cc <vTaskStartScheduler>
      stat = osOK;
 8002598:	2300      	movs	r3, #0
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	e002      	b.n	80025a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800259e:	f04f 33ff 	mov.w	r3, #4294967295
 80025a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80025a4:	687b      	ldr	r3, [r7, #4]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200000d8 	.word	0x200000d8

080025b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08e      	sub	sp, #56	@ 0x38
 80025b8:	af04      	add	r7, sp, #16
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025c4:	f3ef 8305 	mrs	r3, IPSR
 80025c8:	617b      	str	r3, [r7, #20]
  return(result);
 80025ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d17e      	bne.n	80026ce <osThreadNew+0x11a>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d07b      	beq.n	80026ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80025d6:	2380      	movs	r3, #128	@ 0x80
 80025d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80025da:	2318      	movs	r3, #24
 80025dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80025e2:	f04f 33ff 	mov.w	r3, #4294967295
 80025e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d045      	beq.n	800267a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <osThreadNew+0x48>
        name = attr->name;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <osThreadNew+0x6e>
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	2b38      	cmp	r3, #56	@ 0x38
 8002614:	d805      	bhi.n	8002622 <osThreadNew+0x6e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <osThreadNew+0x72>
        return (NULL);
 8002622:	2300      	movs	r3, #0
 8002624:	e054      	b.n	80026d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	089b      	lsrs	r3, r3, #2
 8002634:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00e      	beq.n	800265c <osThreadNew+0xa8>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	2b5b      	cmp	r3, #91	@ 0x5b
 8002644:	d90a      	bls.n	800265c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800264a:	2b00      	cmp	r3, #0
 800264c:	d006      	beq.n	800265c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <osThreadNew+0xa8>
        mem = 1;
 8002656:	2301      	movs	r3, #1
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	e010      	b.n	800267e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10c      	bne.n	800267e <osThreadNew+0xca>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d108      	bne.n	800267e <osThreadNew+0xca>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d104      	bne.n	800267e <osThreadNew+0xca>
          mem = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	e001      	b.n	800267e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d110      	bne.n	80026a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800268c:	9202      	str	r2, [sp, #8]
 800268e:	9301      	str	r3, [sp, #4]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	6a3a      	ldr	r2, [r7, #32]
 8002698:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fe3a 	bl	8003314 <xTaskCreateStatic>
 80026a0:	4603      	mov	r3, r0
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	e013      	b.n	80026ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d110      	bne.n	80026ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	f107 0310 	add.w	r3, r7, #16
 80026b4:	9301      	str	r3, [sp, #4]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 fe88 	bl	80033d4 <xTaskCreate>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d001      	beq.n	80026ce <osThreadNew+0x11a>
            hTask = NULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80026ce:	693b      	ldr	r3, [r7, #16]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3728      	adds	r7, #40	@ 0x28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4a07      	ldr	r2, [pc, #28]	@ (8002704 <vApplicationGetIdleTaskMemory+0x2c>)
 80026e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	4a06      	ldr	r2, [pc, #24]	@ (8002708 <vApplicationGetIdleTaskMemory+0x30>)
 80026ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2280      	movs	r2, #128	@ 0x80
 80026f4:	601a      	str	r2, [r3, #0]
}
 80026f6:	bf00      	nop
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	200000dc 	.word	0x200000dc
 8002708:	20000138 	.word	0x20000138

0800270c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4a07      	ldr	r2, [pc, #28]	@ (8002738 <vApplicationGetTimerTaskMemory+0x2c>)
 800271c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	4a06      	ldr	r2, [pc, #24]	@ (800273c <vApplicationGetTimerTaskMemory+0x30>)
 8002722:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800272a:	601a      	str	r2, [r3, #0]
}
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	20000338 	.word	0x20000338
 800273c:	20000394 	.word	0x20000394

08002740 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f103 0208 	add.w	r2, r3, #8
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f04f 32ff 	mov.w	r2, #4294967295
 8002758:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f103 0208 	add.w	r2, r3, #8
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f103 0208 	add.w	r2, r3, #8
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800279a:	b480      	push	{r7}
 800279c:	b085      	sub	sp, #20
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	601a      	str	r2, [r3, #0]
}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027e2:	b480      	push	{r7}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f8:	d103      	bne.n	8002802 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	e00c      	b.n	800281c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3308      	adds	r3, #8
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	e002      	b.n	8002810 <vListInsert+0x2e>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	429a      	cmp	r2, r3
 800281a:	d2f6      	bcs.n	800280a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	601a      	str	r2, [r3, #0]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6892      	ldr	r2, [r2, #8]
 800286a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6852      	ldr	r2, [r2, #4]
 8002874:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	429a      	cmp	r2, r3
 800287e:	d103      	bne.n	8002888 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	1e5a      	subs	r2, r3, #1
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10b      	bne.n	80028d4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028ce:	bf00      	nop
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80028d4:	f002 f8b8 	bl	8004a48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e0:	68f9      	ldr	r1, [r7, #12]
 80028e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	441a      	add	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002904:	3b01      	subs	r3, #1
 8002906:	68f9      	ldr	r1, [r7, #12]
 8002908:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	441a      	add	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	22ff      	movs	r2, #255	@ 0xff
 8002918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	22ff      	movs	r2, #255	@ 0xff
 8002920:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d114      	bne.n	8002954 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d01a      	beq.n	8002968 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	3310      	adds	r3, #16
 8002936:	4618      	mov	r0, r3
 8002938:	f001 f956 	bl	8003be8 <xTaskRemoveFromEventList>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d012      	beq.n	8002968 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002942:	4b0d      	ldr	r3, [pc, #52]	@ (8002978 <xQueueGenericReset+0xd0>)
 8002944:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	f3bf 8f6f 	isb	sy
 8002952:	e009      	b.n	8002968 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	3310      	adds	r3, #16
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fef1 	bl	8002740 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	3324      	adds	r3, #36	@ 0x24
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff feec 	bl	8002740 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002968:	f002 f8a0 	bl	8004aac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800296c:	2301      	movs	r3, #1
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	e000ed04 	.word	0xe000ed04

0800297c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08e      	sub	sp, #56	@ 0x38
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10b      	bne.n	80029a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002994:	f383 8811 	msr	BASEPRI, r3
 8002998:	f3bf 8f6f 	isb	sy
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80029a2:	bf00      	nop
 80029a4:	bf00      	nop
 80029a6:	e7fd      	b.n	80029a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10b      	bne.n	80029c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80029ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	e7fd      	b.n	80029c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <xQueueGenericCreateStatic+0x56>
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <xQueueGenericCreateStatic+0x5a>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <xQueueGenericCreateStatic+0x5c>
 80029d6:	2300      	movs	r3, #0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10b      	bne.n	80029f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80029dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029e0:	f383 8811 	msr	BASEPRI, r3
 80029e4:	f3bf 8f6f 	isb	sy
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	623b      	str	r3, [r7, #32]
}
 80029ee:	bf00      	nop
 80029f0:	bf00      	nop
 80029f2:	e7fd      	b.n	80029f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d102      	bne.n	8002a00 <xQueueGenericCreateStatic+0x84>
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <xQueueGenericCreateStatic+0x88>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <xQueueGenericCreateStatic+0x8a>
 8002a04:	2300      	movs	r3, #0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10b      	bne.n	8002a22 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a0e:	f383 8811 	msr	BASEPRI, r3
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	61fb      	str	r3, [r7, #28]
}
 8002a1c:	bf00      	nop
 8002a1e:	bf00      	nop
 8002a20:	e7fd      	b.n	8002a1e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a22:	2350      	movs	r3, #80	@ 0x50
 8002a24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2b50      	cmp	r3, #80	@ 0x50
 8002a2a:	d00b      	beq.n	8002a44 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	61bb      	str	r3, [r7, #24]
}
 8002a3e:	bf00      	nop
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002a44:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00d      	beq.n	8002a6c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a58:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	4613      	mov	r3, r2
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f840 	bl	8002aec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3730      	adds	r7, #48	@ 0x30
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b08a      	sub	sp, #40	@ 0x28
 8002a7a:	af02      	add	r7, sp, #8
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	4613      	mov	r3, r2
 8002a82:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10b      	bne.n	8002aa2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a8e:	f383 8811 	msr	BASEPRI, r3
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	613b      	str	r3, [r7, #16]
}
 8002a9c:	bf00      	nop
 8002a9e:	bf00      	nop
 8002aa0:	e7fd      	b.n	8002a9e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	fb02 f303 	mul.w	r3, r2, r3
 8002aaa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	3350      	adds	r3, #80	@ 0x50
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f002 f8eb 	bl	8004c8c <pvPortMalloc>
 8002ab6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d011      	beq.n	8002ae2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	3350      	adds	r3, #80	@ 0x50
 8002ac6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ad0:	79fa      	ldrb	r2, [r7, #7]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f805 	bl	8002aec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ae2:	69bb      	ldr	r3, [r7, #24]
	}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3720      	adds	r7, #32
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d103      	bne.n	8002b08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	e002      	b.n	8002b0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	69b8      	ldr	r0, [r7, #24]
 8002b1e:	f7ff fec3 	bl	80028a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08e      	sub	sp, #56	@ 0x38
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b42:	2300      	movs	r3, #0
 8002b44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10b      	bne.n	8002b68 <xQueueGenericSend+0x34>
	__asm volatile
 8002b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b62:	bf00      	nop
 8002b64:	bf00      	nop
 8002b66:	e7fd      	b.n	8002b64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d103      	bne.n	8002b76 <xQueueGenericSend+0x42>
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <xQueueGenericSend+0x46>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <xQueueGenericSend+0x48>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10b      	bne.n	8002b98 <xQueueGenericSend+0x64>
	__asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b92:	bf00      	nop
 8002b94:	bf00      	nop
 8002b96:	e7fd      	b.n	8002b94 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d103      	bne.n	8002ba6 <xQueueGenericSend+0x72>
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <xQueueGenericSend+0x76>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <xQueueGenericSend+0x78>
 8002baa:	2300      	movs	r3, #0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10b      	bne.n	8002bc8 <xQueueGenericSend+0x94>
	__asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	623b      	str	r3, [r7, #32]
}
 8002bc2:	bf00      	nop
 8002bc4:	bf00      	nop
 8002bc6:	e7fd      	b.n	8002bc4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bc8:	f001 f9ce 	bl	8003f68 <xTaskGetSchedulerState>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d102      	bne.n	8002bd8 <xQueueGenericSend+0xa4>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <xQueueGenericSend+0xa8>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <xQueueGenericSend+0xaa>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10b      	bne.n	8002bfa <xQueueGenericSend+0xc6>
	__asm volatile
 8002be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002be6:	f383 8811 	msr	BASEPRI, r3
 8002bea:	f3bf 8f6f 	isb	sy
 8002bee:	f3bf 8f4f 	dsb	sy
 8002bf2:	61fb      	str	r3, [r7, #28]
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop
 8002bf8:	e7fd      	b.n	8002bf6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bfa:	f001 ff25 	bl	8004a48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d302      	bcc.n	8002c10 <xQueueGenericSend+0xdc>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d129      	bne.n	8002c64 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	68b9      	ldr	r1, [r7, #8]
 8002c14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c16:	f000 fa0f 	bl	8003038 <prvCopyDataToQueue>
 8002c1a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d010      	beq.n	8002c46 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c26:	3324      	adds	r3, #36	@ 0x24
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 ffdd 	bl	8003be8 <xTaskRemoveFromEventList>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d013      	beq.n	8002c5c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c34:	4b3f      	ldr	r3, [pc, #252]	@ (8002d34 <xQueueGenericSend+0x200>)
 8002c36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	f3bf 8f6f 	isb	sy
 8002c44:	e00a      	b.n	8002c5c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d007      	beq.n	8002c5c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c4c:	4b39      	ldr	r3, [pc, #228]	@ (8002d34 <xQueueGenericSend+0x200>)
 8002c4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c5c:	f001 ff26 	bl	8004aac <vPortExitCritical>
				return pdPASS;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e063      	b.n	8002d2c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d103      	bne.n	8002c72 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c6a:	f001 ff1f 	bl	8004aac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e05c      	b.n	8002d2c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d106      	bne.n	8002c86 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c78:	f107 0314 	add.w	r3, r7, #20
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f001 f817 	bl	8003cb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c82:	2301      	movs	r3, #1
 8002c84:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c86:	f001 ff11 	bl	8004aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c8a:	f000 fd87 	bl	800379c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c8e:	f001 fedb 	bl	8004a48 <vPortEnterCritical>
 8002c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c98:	b25b      	sxtb	r3, r3
 8002c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9e:	d103      	bne.n	8002ca8 <xQueueGenericSend+0x174>
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002caa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cae:	b25b      	sxtb	r3, r3
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d103      	bne.n	8002cbe <xQueueGenericSend+0x18a>
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002cbe:	f001 fef5 	bl	8004aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cc2:	1d3a      	adds	r2, r7, #4
 8002cc4:	f107 0314 	add.w	r3, r7, #20
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f001 f806 	bl	8003cdc <xTaskCheckForTimeOut>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d124      	bne.n	8002d20 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002cd6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cd8:	f000 faa6 	bl	8003228 <prvIsQueueFull>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d018      	beq.n	8002d14 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce4:	3310      	adds	r3, #16
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 ff2a 	bl	8003b44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002cf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cf2:	f000 fa31 	bl	8003158 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002cf6:	f000 fd5f 	bl	80037b8 <xTaskResumeAll>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f47f af7c 	bne.w	8002bfa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002d02:	4b0c      	ldr	r3, [pc, #48]	@ (8002d34 <xQueueGenericSend+0x200>)
 8002d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	e772      	b.n	8002bfa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d16:	f000 fa1f 	bl	8003158 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d1a:	f000 fd4d 	bl	80037b8 <xTaskResumeAll>
 8002d1e:	e76c      	b.n	8002bfa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d22:	f000 fa19 	bl	8003158 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d26:	f000 fd47 	bl	80037b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3738      	adds	r7, #56	@ 0x38
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	e000ed04 	.word	0xe000ed04

08002d38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b090      	sub	sp, #64	@ 0x40
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10b      	bne.n	8002d68 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d62:	bf00      	nop
 8002d64:	bf00      	nop
 8002d66:	e7fd      	b.n	8002d64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d103      	bne.n	8002d76 <xQueueGenericSendFromISR+0x3e>
 8002d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <xQueueGenericSendFromISR+0x42>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <xQueueGenericSendFromISR+0x44>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10b      	bne.n	8002d98 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d84:	f383 8811 	msr	BASEPRI, r3
 8002d88:	f3bf 8f6f 	isb	sy
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d92:	bf00      	nop
 8002d94:	bf00      	nop
 8002d96:	e7fd      	b.n	8002d94 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d103      	bne.n	8002da6 <xQueueGenericSendFromISR+0x6e>
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <xQueueGenericSendFromISR+0x72>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <xQueueGenericSendFromISR+0x74>
 8002daa:	2300      	movs	r3, #0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10b      	bne.n	8002dc8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db4:	f383 8811 	msr	BASEPRI, r3
 8002db8:	f3bf 8f6f 	isb	sy
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	623b      	str	r3, [r7, #32]
}
 8002dc2:	bf00      	nop
 8002dc4:	bf00      	nop
 8002dc6:	e7fd      	b.n	8002dc4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002dc8:	f001 ff1e 	bl	8004c08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002dcc:	f3ef 8211 	mrs	r2, BASEPRI
 8002dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dd4:	f383 8811 	msr	BASEPRI, r3
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	61fa      	str	r2, [r7, #28]
 8002de2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002de4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002de6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d302      	bcc.n	8002dfa <xQueueGenericSendFromISR+0xc2>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d12f      	bne.n	8002e5a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002e10:	f000 f912 	bl	8003038 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e14:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1c:	d112      	bne.n	8002e44 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d016      	beq.n	8002e54 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e28:	3324      	adds	r3, #36	@ 0x24
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fedc 	bl	8003be8 <xTaskRemoveFromEventList>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00e      	beq.n	8002e54 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00b      	beq.n	8002e54 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	e007      	b.n	8002e54 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002e48:	3301      	adds	r3, #1
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	b25a      	sxtb	r2, r3
 8002e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002e54:	2301      	movs	r3, #1
 8002e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002e58:	e001      	b.n	8002e5e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e60:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3740      	adds	r7, #64	@ 0x40
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08c      	sub	sp, #48	@ 0x30
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e80:	2300      	movs	r3, #0
 8002e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10b      	bne.n	8002ea6 <xQueueReceive+0x32>
	__asm volatile
 8002e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e92:	f383 8811 	msr	BASEPRI, r3
 8002e96:	f3bf 8f6f 	isb	sy
 8002e9a:	f3bf 8f4f 	dsb	sy
 8002e9e:	623b      	str	r3, [r7, #32]
}
 8002ea0:	bf00      	nop
 8002ea2:	bf00      	nop
 8002ea4:	e7fd      	b.n	8002ea2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d103      	bne.n	8002eb4 <xQueueReceive+0x40>
 8002eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <xQueueReceive+0x44>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <xQueueReceive+0x46>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10b      	bne.n	8002ed6 <xQueueReceive+0x62>
	__asm volatile
 8002ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec2:	f383 8811 	msr	BASEPRI, r3
 8002ec6:	f3bf 8f6f 	isb	sy
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	61fb      	str	r3, [r7, #28]
}
 8002ed0:	bf00      	nop
 8002ed2:	bf00      	nop
 8002ed4:	e7fd      	b.n	8002ed2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ed6:	f001 f847 	bl	8003f68 <xTaskGetSchedulerState>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d102      	bne.n	8002ee6 <xQueueReceive+0x72>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <xQueueReceive+0x76>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <xQueueReceive+0x78>
 8002eea:	2300      	movs	r3, #0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10b      	bne.n	8002f08 <xQueueReceive+0x94>
	__asm volatile
 8002ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef4:	f383 8811 	msr	BASEPRI, r3
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	61bb      	str	r3, [r7, #24]
}
 8002f02:	bf00      	nop
 8002f04:	bf00      	nop
 8002f06:	e7fd      	b.n	8002f04 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f08:	f001 fd9e 	bl	8004a48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f10:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01f      	beq.n	8002f58 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f1c:	f000 f8f6 	bl	800310c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	1e5a      	subs	r2, r3, #1
 8002f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f26:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00f      	beq.n	8002f50 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f32:	3310      	adds	r3, #16
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 fe57 	bl	8003be8 <xTaskRemoveFromEventList>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d007      	beq.n	8002f50 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f40:	4b3c      	ldr	r3, [pc, #240]	@ (8003034 <xQueueReceive+0x1c0>)
 8002f42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f50:	f001 fdac 	bl	8004aac <vPortExitCritical>
				return pdPASS;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e069      	b.n	800302c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d103      	bne.n	8002f66 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f5e:	f001 fda5 	bl	8004aac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f62:	2300      	movs	r3, #0
 8002f64:	e062      	b.n	800302c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d106      	bne.n	8002f7a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f6c:	f107 0310 	add.w	r3, r7, #16
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 fe9d 	bl	8003cb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f76:	2301      	movs	r3, #1
 8002f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f7a:	f001 fd97 	bl	8004aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f7e:	f000 fc0d 	bl	800379c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f82:	f001 fd61 	bl	8004a48 <vPortEnterCritical>
 8002f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f8c:	b25b      	sxtb	r3, r3
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f92:	d103      	bne.n	8002f9c <xQueueReceive+0x128>
 8002f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002fa2:	b25b      	sxtb	r3, r3
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa8:	d103      	bne.n	8002fb2 <xQueueReceive+0x13e>
 8002faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fb2:	f001 fd7b 	bl	8004aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fb6:	1d3a      	adds	r2, r7, #4
 8002fb8:	f107 0310 	add.w	r3, r7, #16
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fe8c 	bl	8003cdc <xTaskCheckForTimeOut>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d123      	bne.n	8003012 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fcc:	f000 f916 	bl	80031fc <prvIsQueueEmpty>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d017      	beq.n	8003006 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd8:	3324      	adds	r3, #36	@ 0x24
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 fdb0 	bl	8003b44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fe4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fe6:	f000 f8b7 	bl	8003158 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fea:	f000 fbe5 	bl	80037b8 <xTaskResumeAll>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d189      	bne.n	8002f08 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8003034 <xQueueReceive+0x1c0>)
 8002ff6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	e780      	b.n	8002f08 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003006:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003008:	f000 f8a6 	bl	8003158 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800300c:	f000 fbd4 	bl	80037b8 <xTaskResumeAll>
 8003010:	e77a      	b.n	8002f08 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003012:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003014:	f000 f8a0 	bl	8003158 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003018:	f000 fbce 	bl	80037b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800301c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800301e:	f000 f8ed 	bl	80031fc <prvIsQueueEmpty>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	f43f af6f 	beq.w	8002f08 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800302a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800302c:	4618      	mov	r0, r3
 800302e:	3730      	adds	r7, #48	@ 0x30
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	e000ed04 	.word	0xe000ed04

08003038 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10d      	bne.n	8003072 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d14d      	bne.n	80030fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	4618      	mov	r0, r3
 8003064:	f000 ff9e 	bl	8003fa4 <xTaskPriorityDisinherit>
 8003068:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	e043      	b.n	80030fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d119      	bne.n	80030ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6858      	ldr	r0, [r3, #4]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003080:	461a      	mov	r2, r3
 8003082:	68b9      	ldr	r1, [r7, #8]
 8003084:	f002 f8ce 	bl	8005224 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003090:	441a      	add	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d32b      	bcc.n	80030fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	e026      	b.n	80030fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	68d8      	ldr	r0, [r3, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b4:	461a      	mov	r2, r3
 80030b6:	68b9      	ldr	r1, [r7, #8]
 80030b8:	f002 f8b4 	bl	8005224 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	425b      	negs	r3, r3
 80030c6:	441a      	add	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d207      	bcs.n	80030e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e0:	425b      	negs	r3, r3
 80030e2:	441a      	add	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d105      	bne.n	80030fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003102:	697b      	ldr	r3, [r7, #20]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d018      	beq.n	8003150 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	441a      	add	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	429a      	cmp	r2, r3
 8003136:	d303      	bcc.n	8003140 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68d9      	ldr	r1, [r3, #12]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	461a      	mov	r2, r3
 800314a:	6838      	ldr	r0, [r7, #0]
 800314c:	f002 f86a 	bl	8005224 <memcpy>
	}
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003160:	f001 fc72 	bl	8004a48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800316a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800316c:	e011      	b.n	8003192 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003172:	2b00      	cmp	r3, #0
 8003174:	d012      	beq.n	800319c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3324      	adds	r3, #36	@ 0x24
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fd34 	bl	8003be8 <xTaskRemoveFromEventList>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003186:	f000 fe0d 	bl	8003da4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	3b01      	subs	r3, #1
 800318e:	b2db      	uxtb	r3, r3
 8003190:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003196:	2b00      	cmp	r3, #0
 8003198:	dce9      	bgt.n	800316e <prvUnlockQueue+0x16>
 800319a:	e000      	b.n	800319e <prvUnlockQueue+0x46>
					break;
 800319c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	22ff      	movs	r2, #255	@ 0xff
 80031a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80031a6:	f001 fc81 	bl	8004aac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80031aa:	f001 fc4d 	bl	8004a48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031b6:	e011      	b.n	80031dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d012      	beq.n	80031e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3310      	adds	r3, #16
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fd0f 	bl	8003be8 <xTaskRemoveFromEventList>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80031d0:	f000 fde8 	bl	8003da4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80031d4:	7bbb      	ldrb	r3, [r7, #14]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	dce9      	bgt.n	80031b8 <prvUnlockQueue+0x60>
 80031e4:	e000      	b.n	80031e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80031e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	22ff      	movs	r2, #255	@ 0xff
 80031ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80031f0:	f001 fc5c 	bl	8004aac <vPortExitCritical>
}
 80031f4:	bf00      	nop
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003204:	f001 fc20 	bl	8004a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800320c:	2b00      	cmp	r3, #0
 800320e:	d102      	bne.n	8003216 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003210:	2301      	movs	r3, #1
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	e001      	b.n	800321a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800321a:	f001 fc47 	bl	8004aac <vPortExitCritical>

	return xReturn;
 800321e:	68fb      	ldr	r3, [r7, #12]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003230:	f001 fc0a 	bl	8004a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323c:	429a      	cmp	r2, r3
 800323e:	d102      	bne.n	8003246 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003240:	2301      	movs	r3, #1
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	e001      	b.n	800324a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800324a:	f001 fc2f 	bl	8004aac <vPortExitCritical>

	return xReturn;
 800324e:	68fb      	ldr	r3, [r7, #12]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	e014      	b.n	8003292 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003268:	4a0f      	ldr	r2, [pc, #60]	@ (80032a8 <vQueueAddToRegistry+0x50>)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10b      	bne.n	800328c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003274:	490c      	ldr	r1, [pc, #48]	@ (80032a8 <vQueueAddToRegistry+0x50>)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800327e:	4a0a      	ldr	r2, [pc, #40]	@ (80032a8 <vQueueAddToRegistry+0x50>)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4413      	add	r3, r2
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800328a:	e006      	b.n	800329a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3301      	adds	r3, #1
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b07      	cmp	r3, #7
 8003296:	d9e7      	bls.n	8003268 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003298:	bf00      	nop
 800329a:	bf00      	nop
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000794 	.word	0x20000794

080032ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80032bc:	f001 fbc4 	bl	8004a48 <vPortEnterCritical>
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032c6:	b25b      	sxtb	r3, r3
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032cc:	d103      	bne.n	80032d6 <vQueueWaitForMessageRestricted+0x2a>
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032dc:	b25b      	sxtb	r3, r3
 80032de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e2:	d103      	bne.n	80032ec <vQueueWaitForMessageRestricted+0x40>
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032ec:	f001 fbde 	bl	8004aac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d106      	bne.n	8003306 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	3324      	adds	r3, #36	@ 0x24
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	68b9      	ldr	r1, [r7, #8]
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fc45 	bl	8003b90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003306:	6978      	ldr	r0, [r7, #20]
 8003308:	f7ff ff26 	bl	8003158 <prvUnlockQueue>
	}
 800330c:	bf00      	nop
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08e      	sub	sp, #56	@ 0x38
 8003318:	af04      	add	r7, sp, #16
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10b      	bne.n	8003340 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	623b      	str	r3, [r7, #32]
}
 800333a:	bf00      	nop
 800333c:	bf00      	nop
 800333e:	e7fd      	b.n	800333c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10b      	bne.n	800335e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800334a:	f383 8811 	msr	BASEPRI, r3
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	61fb      	str	r3, [r7, #28]
}
 8003358:	bf00      	nop
 800335a:	bf00      	nop
 800335c:	e7fd      	b.n	800335a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800335e:	235c      	movs	r3, #92	@ 0x5c
 8003360:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	2b5c      	cmp	r3, #92	@ 0x5c
 8003366:	d00b      	beq.n	8003380 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800336c:	f383 8811 	msr	BASEPRI, r3
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	61bb      	str	r3, [r7, #24]
}
 800337a:	bf00      	nop
 800337c:	bf00      	nop
 800337e:	e7fd      	b.n	800337c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003380:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01e      	beq.n	80033c6 <xTaskCreateStatic+0xb2>
 8003388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01b      	beq.n	80033c6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800338e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003390:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003394:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003396:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339a:	2202      	movs	r2, #2
 800339c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033a0:	2300      	movs	r3, #0
 80033a2:	9303      	str	r3, [sp, #12]
 80033a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a6:	9302      	str	r3, [sp, #8]
 80033a8:	f107 0314 	add.w	r3, r7, #20
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	68b9      	ldr	r1, [r7, #8]
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f850 	bl	800345e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80033c0:	f000 f8de 	bl	8003580 <prvAddNewTaskToReadyList>
 80033c4:	e001      	b.n	80033ca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80033ca:	697b      	ldr	r3, [r7, #20]
	}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3728      	adds	r7, #40	@ 0x28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08c      	sub	sp, #48	@ 0x30
 80033d8:	af04      	add	r7, sp, #16
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	4613      	mov	r3, r2
 80033e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f001 fc4f 	bl	8004c8c <pvPortMalloc>
 80033ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00e      	beq.n	8003414 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033f6:	205c      	movs	r0, #92	@ 0x5c
 80033f8:	f001 fc48 	bl	8004c8c <pvPortMalloc>
 80033fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	631a      	str	r2, [r3, #48]	@ 0x30
 800340a:	e005      	b.n	8003418 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800340c:	6978      	ldr	r0, [r7, #20]
 800340e:	f001 fd0b 	bl	8004e28 <vPortFree>
 8003412:	e001      	b.n	8003418 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003414:	2300      	movs	r3, #0
 8003416:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d017      	beq.n	800344e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003426:	88fa      	ldrh	r2, [r7, #6]
 8003428:	2300      	movs	r3, #0
 800342a:	9303      	str	r3, [sp, #12]
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	9302      	str	r3, [sp, #8]
 8003430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	68b9      	ldr	r1, [r7, #8]
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 f80e 	bl	800345e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003442:	69f8      	ldr	r0, [r7, #28]
 8003444:	f000 f89c 	bl	8003580 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003448:	2301      	movs	r3, #1
 800344a:	61bb      	str	r3, [r7, #24]
 800344c:	e002      	b.n	8003454 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800344e:	f04f 33ff 	mov.w	r3, #4294967295
 8003452:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003454:	69bb      	ldr	r3, [r7, #24]
	}
 8003456:	4618      	mov	r0, r3
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b088      	sub	sp, #32
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800346c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	461a      	mov	r2, r3
 8003476:	21a5      	movs	r1, #165	@ 0xa5
 8003478:	f001 fea0 	bl	80051bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800347c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003486:	3b01      	subs	r3, #1
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	f023 0307 	bic.w	r3, r3, #7
 8003494:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00b      	beq.n	80034b8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80034a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	617b      	str	r3, [r7, #20]
}
 80034b2:	bf00      	nop
 80034b4:	bf00      	nop
 80034b6:	e7fd      	b.n	80034b4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d01f      	beq.n	80034fe <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]
 80034c2:	e012      	b.n	80034ea <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	4413      	add	r3, r2
 80034ca:	7819      	ldrb	r1, [r3, #0]
 80034cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	4413      	add	r3, r2
 80034d2:	3334      	adds	r3, #52	@ 0x34
 80034d4:	460a      	mov	r2, r1
 80034d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	4413      	add	r3, r2
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d006      	beq.n	80034f2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	3301      	adds	r3, #1
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	2b0f      	cmp	r3, #15
 80034ee:	d9e9      	bls.n	80034c4 <prvInitialiseNewTask+0x66>
 80034f0:	e000      	b.n	80034f4 <prvInitialiseNewTask+0x96>
			{
				break;
 80034f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034fc:	e003      	b.n	8003506 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80034fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003508:	2b37      	cmp	r3, #55	@ 0x37
 800350a:	d901      	bls.n	8003510 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800350c:	2337      	movs	r3, #55	@ 0x37
 800350e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003512:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003514:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003518:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800351a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800351c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351e:	2200      	movs	r2, #0
 8003520:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003524:	3304      	adds	r3, #4
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff f92a 	bl	8002780 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800352c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352e:	3318      	adds	r3, #24
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff f925 	bl	8002780 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800353a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800353c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800353e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003544:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800354a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800354c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354e:	2200      	movs	r2, #0
 8003550:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	68f9      	ldr	r1, [r7, #12]
 800355e:	69b8      	ldr	r0, [r7, #24]
 8003560:	f001 f93e 	bl	80047e0 <pxPortInitialiseStack>
 8003564:	4602      	mov	r2, r0
 8003566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003568:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800356a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003576:	bf00      	nop
 8003578:	3720      	adds	r7, #32
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003588:	f001 fa5e 	bl	8004a48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800358c:	4b2d      	ldr	r3, [pc, #180]	@ (8003644 <prvAddNewTaskToReadyList+0xc4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3301      	adds	r3, #1
 8003592:	4a2c      	ldr	r2, [pc, #176]	@ (8003644 <prvAddNewTaskToReadyList+0xc4>)
 8003594:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003596:	4b2c      	ldr	r3, [pc, #176]	@ (8003648 <prvAddNewTaskToReadyList+0xc8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d109      	bne.n	80035b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800359e:	4a2a      	ldr	r2, [pc, #168]	@ (8003648 <prvAddNewTaskToReadyList+0xc8>)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035a4:	4b27      	ldr	r3, [pc, #156]	@ (8003644 <prvAddNewTaskToReadyList+0xc4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d110      	bne.n	80035ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80035ac:	f000 fc1e 	bl	8003dec <prvInitialiseTaskLists>
 80035b0:	e00d      	b.n	80035ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035b2:	4b26      	ldr	r3, [pc, #152]	@ (800364c <prvAddNewTaskToReadyList+0xcc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d109      	bne.n	80035ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035ba:	4b23      	ldr	r3, [pc, #140]	@ (8003648 <prvAddNewTaskToReadyList+0xc8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d802      	bhi.n	80035ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003648 <prvAddNewTaskToReadyList+0xc8>)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035ce:	4b20      	ldr	r3, [pc, #128]	@ (8003650 <prvAddNewTaskToReadyList+0xd0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3301      	adds	r3, #1
 80035d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003650 <prvAddNewTaskToReadyList+0xd0>)
 80035d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80035d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003650 <prvAddNewTaskToReadyList+0xd0>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003654 <prvAddNewTaskToReadyList+0xd4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d903      	bls.n	80035f4 <prvAddNewTaskToReadyList+0x74>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f0:	4a18      	ldr	r2, [pc, #96]	@ (8003654 <prvAddNewTaskToReadyList+0xd4>)
 80035f2:	6013      	str	r3, [r2, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4a15      	ldr	r2, [pc, #84]	@ (8003658 <prvAddNewTaskToReadyList+0xd8>)
 8003602:	441a      	add	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3304      	adds	r3, #4
 8003608:	4619      	mov	r1, r3
 800360a:	4610      	mov	r0, r2
 800360c:	f7ff f8c5 	bl	800279a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003610:	f001 fa4c 	bl	8004aac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003614:	4b0d      	ldr	r3, [pc, #52]	@ (800364c <prvAddNewTaskToReadyList+0xcc>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00e      	beq.n	800363a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800361c:	4b0a      	ldr	r3, [pc, #40]	@ (8003648 <prvAddNewTaskToReadyList+0xc8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003626:	429a      	cmp	r2, r3
 8003628:	d207      	bcs.n	800363a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800362a:	4b0c      	ldr	r3, [pc, #48]	@ (800365c <prvAddNewTaskToReadyList+0xdc>)
 800362c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	f3bf 8f4f 	dsb	sy
 8003636:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800363a:	bf00      	nop
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20000ca8 	.word	0x20000ca8
 8003648:	200007d4 	.word	0x200007d4
 800364c:	20000cb4 	.word	0x20000cb4
 8003650:	20000cc4 	.word	0x20000cc4
 8003654:	20000cb0 	.word	0x20000cb0
 8003658:	200007d8 	.word	0x200007d8
 800365c:	e000ed04 	.word	0xe000ed04

08003660 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d018      	beq.n	80036a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003672:	4b14      	ldr	r3, [pc, #80]	@ (80036c4 <vTaskDelay+0x64>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <vTaskDelay+0x32>
	__asm volatile
 800367a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800367e:	f383 8811 	msr	BASEPRI, r3
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	60bb      	str	r3, [r7, #8]
}
 800368c:	bf00      	nop
 800368e:	bf00      	nop
 8003690:	e7fd      	b.n	800368e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003692:	f000 f883 	bl	800379c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003696:	2100      	movs	r1, #0
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fcf3 	bl	8004084 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800369e:	f000 f88b 	bl	80037b8 <xTaskResumeAll>
 80036a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d107      	bne.n	80036ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80036aa:	4b07      	ldr	r3, [pc, #28]	@ (80036c8 <vTaskDelay+0x68>)
 80036ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000cd0 	.word	0x20000cd0
 80036c8:	e000ed04 	.word	0xe000ed04

080036cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	@ 0x28
 80036d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036da:	463a      	mov	r2, r7
 80036dc:	1d39      	adds	r1, r7, #4
 80036de:	f107 0308 	add.w	r3, r7, #8
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fe fff8 	bl	80026d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036e8:	6839      	ldr	r1, [r7, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	9202      	str	r2, [sp, #8]
 80036f0:	9301      	str	r3, [sp, #4]
 80036f2:	2300      	movs	r3, #0
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	2300      	movs	r3, #0
 80036f8:	460a      	mov	r2, r1
 80036fa:	4922      	ldr	r1, [pc, #136]	@ (8003784 <vTaskStartScheduler+0xb8>)
 80036fc:	4822      	ldr	r0, [pc, #136]	@ (8003788 <vTaskStartScheduler+0xbc>)
 80036fe:	f7ff fe09 	bl	8003314 <xTaskCreateStatic>
 8003702:	4603      	mov	r3, r0
 8003704:	4a21      	ldr	r2, [pc, #132]	@ (800378c <vTaskStartScheduler+0xc0>)
 8003706:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003708:	4b20      	ldr	r3, [pc, #128]	@ (800378c <vTaskStartScheduler+0xc0>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003710:	2301      	movs	r3, #1
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	e001      	b.n	800371a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d102      	bne.n	8003726 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003720:	f000 fd04 	bl	800412c <xTimerCreateTimerTask>
 8003724:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d116      	bne.n	800375a <vTaskStartScheduler+0x8e>
	__asm volatile
 800372c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003730:	f383 8811 	msr	BASEPRI, r3
 8003734:	f3bf 8f6f 	isb	sy
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	613b      	str	r3, [r7, #16]
}
 800373e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003740:	4b13      	ldr	r3, [pc, #76]	@ (8003790 <vTaskStartScheduler+0xc4>)
 8003742:	f04f 32ff 	mov.w	r2, #4294967295
 8003746:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003748:	4b12      	ldr	r3, [pc, #72]	@ (8003794 <vTaskStartScheduler+0xc8>)
 800374a:	2201      	movs	r2, #1
 800374c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800374e:	4b12      	ldr	r3, [pc, #72]	@ (8003798 <vTaskStartScheduler+0xcc>)
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003754:	f001 f8d4 	bl	8004900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003758:	e00f      	b.n	800377a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003760:	d10b      	bne.n	800377a <vTaskStartScheduler+0xae>
	__asm volatile
 8003762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003766:	f383 8811 	msr	BASEPRI, r3
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	60fb      	str	r3, [r7, #12]
}
 8003774:	bf00      	nop
 8003776:	bf00      	nop
 8003778:	e7fd      	b.n	8003776 <vTaskStartScheduler+0xaa>
}
 800377a:	bf00      	nop
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	08005b84 	.word	0x08005b84
 8003788:	08003dbd 	.word	0x08003dbd
 800378c:	20000ccc 	.word	0x20000ccc
 8003790:	20000cc8 	.word	0x20000cc8
 8003794:	20000cb4 	.word	0x20000cb4
 8003798:	20000cac 	.word	0x20000cac

0800379c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80037a0:	4b04      	ldr	r3, [pc, #16]	@ (80037b4 <vTaskSuspendAll+0x18>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3301      	adds	r3, #1
 80037a6:	4a03      	ldr	r2, [pc, #12]	@ (80037b4 <vTaskSuspendAll+0x18>)
 80037a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80037aa:	bf00      	nop
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	20000cd0 	.word	0x20000cd0

080037b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037c6:	4b42      	ldr	r3, [pc, #264]	@ (80038d0 <xTaskResumeAll+0x118>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10b      	bne.n	80037e6 <xTaskResumeAll+0x2e>
	__asm volatile
 80037ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d2:	f383 8811 	msr	BASEPRI, r3
 80037d6:	f3bf 8f6f 	isb	sy
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	603b      	str	r3, [r7, #0]
}
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	e7fd      	b.n	80037e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037e6:	f001 f92f 	bl	8004a48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037ea:	4b39      	ldr	r3, [pc, #228]	@ (80038d0 <xTaskResumeAll+0x118>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	4a37      	ldr	r2, [pc, #220]	@ (80038d0 <xTaskResumeAll+0x118>)
 80037f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037f4:	4b36      	ldr	r3, [pc, #216]	@ (80038d0 <xTaskResumeAll+0x118>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d162      	bne.n	80038c2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037fc:	4b35      	ldr	r3, [pc, #212]	@ (80038d4 <xTaskResumeAll+0x11c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d05e      	beq.n	80038c2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003804:	e02f      	b.n	8003866 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003806:	4b34      	ldr	r3, [pc, #208]	@ (80038d8 <xTaskResumeAll+0x120>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	3318      	adds	r3, #24
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff f81e 	bl	8002854 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	3304      	adds	r3, #4
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff f819 	bl	8002854 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003826:	4b2d      	ldr	r3, [pc, #180]	@ (80038dc <xTaskResumeAll+0x124>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d903      	bls.n	8003836 <xTaskResumeAll+0x7e>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003832:	4a2a      	ldr	r2, [pc, #168]	@ (80038dc <xTaskResumeAll+0x124>)
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4a27      	ldr	r2, [pc, #156]	@ (80038e0 <xTaskResumeAll+0x128>)
 8003844:	441a      	add	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	3304      	adds	r3, #4
 800384a:	4619      	mov	r1, r3
 800384c:	4610      	mov	r0, r2
 800384e:	f7fe ffa4 	bl	800279a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003856:	4b23      	ldr	r3, [pc, #140]	@ (80038e4 <xTaskResumeAll+0x12c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385c:	429a      	cmp	r2, r3
 800385e:	d302      	bcc.n	8003866 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003860:	4b21      	ldr	r3, [pc, #132]	@ (80038e8 <xTaskResumeAll+0x130>)
 8003862:	2201      	movs	r2, #1
 8003864:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003866:	4b1c      	ldr	r3, [pc, #112]	@ (80038d8 <xTaskResumeAll+0x120>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1cb      	bne.n	8003806 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003874:	f000 fb58 	bl	8003f28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003878:	4b1c      	ldr	r3, [pc, #112]	@ (80038ec <xTaskResumeAll+0x134>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d010      	beq.n	80038a6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003884:	f000 f846 	bl	8003914 <xTaskIncrementTick>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800388e:	4b16      	ldr	r3, [pc, #88]	@ (80038e8 <xTaskResumeAll+0x130>)
 8003890:	2201      	movs	r2, #1
 8003892:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3b01      	subs	r3, #1
 8003898:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1f1      	bne.n	8003884 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80038a0:	4b12      	ldr	r3, [pc, #72]	@ (80038ec <xTaskResumeAll+0x134>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038a6:	4b10      	ldr	r3, [pc, #64]	@ (80038e8 <xTaskResumeAll+0x130>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038ae:	2301      	movs	r3, #1
 80038b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038b2:	4b0f      	ldr	r3, [pc, #60]	@ (80038f0 <xTaskResumeAll+0x138>)
 80038b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038c2:	f001 f8f3 	bl	8004aac <vPortExitCritical>

	return xAlreadyYielded;
 80038c6:	68bb      	ldr	r3, [r7, #8]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000cd0 	.word	0x20000cd0
 80038d4:	20000ca8 	.word	0x20000ca8
 80038d8:	20000c68 	.word	0x20000c68
 80038dc:	20000cb0 	.word	0x20000cb0
 80038e0:	200007d8 	.word	0x200007d8
 80038e4:	200007d4 	.word	0x200007d4
 80038e8:	20000cbc 	.word	0x20000cbc
 80038ec:	20000cb8 	.word	0x20000cb8
 80038f0:	e000ed04 	.word	0xe000ed04

080038f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80038fa:	4b05      	ldr	r3, [pc, #20]	@ (8003910 <xTaskGetTickCount+0x1c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003900:	687b      	ldr	r3, [r7, #4]
}
 8003902:	4618      	mov	r0, r3
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	20000cac 	.word	0x20000cac

08003914 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800391e:	4b4f      	ldr	r3, [pc, #316]	@ (8003a5c <xTaskIncrementTick+0x148>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	f040 8090 	bne.w	8003a48 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003928:	4b4d      	ldr	r3, [pc, #308]	@ (8003a60 <xTaskIncrementTick+0x14c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3301      	adds	r3, #1
 800392e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003930:	4a4b      	ldr	r2, [pc, #300]	@ (8003a60 <xTaskIncrementTick+0x14c>)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d121      	bne.n	8003980 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800393c:	4b49      	ldr	r3, [pc, #292]	@ (8003a64 <xTaskIncrementTick+0x150>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00b      	beq.n	800395e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800394a:	f383 8811 	msr	BASEPRI, r3
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	f3bf 8f4f 	dsb	sy
 8003956:	603b      	str	r3, [r7, #0]
}
 8003958:	bf00      	nop
 800395a:	bf00      	nop
 800395c:	e7fd      	b.n	800395a <xTaskIncrementTick+0x46>
 800395e:	4b41      	ldr	r3, [pc, #260]	@ (8003a64 <xTaskIncrementTick+0x150>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	4b40      	ldr	r3, [pc, #256]	@ (8003a68 <xTaskIncrementTick+0x154>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a3e      	ldr	r2, [pc, #248]	@ (8003a64 <xTaskIncrementTick+0x150>)
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	4a3e      	ldr	r2, [pc, #248]	@ (8003a68 <xTaskIncrementTick+0x154>)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	4b3e      	ldr	r3, [pc, #248]	@ (8003a6c <xTaskIncrementTick+0x158>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3301      	adds	r3, #1
 8003978:	4a3c      	ldr	r2, [pc, #240]	@ (8003a6c <xTaskIncrementTick+0x158>)
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	f000 fad4 	bl	8003f28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003980:	4b3b      	ldr	r3, [pc, #236]	@ (8003a70 <xTaskIncrementTick+0x15c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	429a      	cmp	r2, r3
 8003988:	d349      	bcc.n	8003a1e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800398a:	4b36      	ldr	r3, [pc, #216]	@ (8003a64 <xTaskIncrementTick+0x150>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d104      	bne.n	800399e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003994:	4b36      	ldr	r3, [pc, #216]	@ (8003a70 <xTaskIncrementTick+0x15c>)
 8003996:	f04f 32ff 	mov.w	r2, #4294967295
 800399a:	601a      	str	r2, [r3, #0]
					break;
 800399c:	e03f      	b.n	8003a1e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800399e:	4b31      	ldr	r3, [pc, #196]	@ (8003a64 <xTaskIncrementTick+0x150>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d203      	bcs.n	80039be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039b6:	4a2e      	ldr	r2, [pc, #184]	@ (8003a70 <xTaskIncrementTick+0x15c>)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80039bc:	e02f      	b.n	8003a1e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	3304      	adds	r3, #4
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe ff46 	bl	8002854 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d004      	beq.n	80039da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	3318      	adds	r3, #24
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fe ff3d 	bl	8002854 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039de:	4b25      	ldr	r3, [pc, #148]	@ (8003a74 <xTaskIncrementTick+0x160>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d903      	bls.n	80039ee <xTaskIncrementTick+0xda>
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ea:	4a22      	ldr	r2, [pc, #136]	@ (8003a74 <xTaskIncrementTick+0x160>)
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003a78 <xTaskIncrementTick+0x164>)
 80039fc:	441a      	add	r2, r3
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	3304      	adds	r3, #4
 8003a02:	4619      	mov	r1, r3
 8003a04:	4610      	mov	r0, r2
 8003a06:	f7fe fec8 	bl	800279a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a7c <xTaskIncrementTick+0x168>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d3b8      	bcc.n	800398a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a1c:	e7b5      	b.n	800398a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a1e:	4b17      	ldr	r3, [pc, #92]	@ (8003a7c <xTaskIncrementTick+0x168>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a24:	4914      	ldr	r1, [pc, #80]	@ (8003a78 <xTaskIncrementTick+0x164>)
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d901      	bls.n	8003a3a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003a36:	2301      	movs	r3, #1
 8003a38:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a3a:	4b11      	ldr	r3, [pc, #68]	@ (8003a80 <xTaskIncrementTick+0x16c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d007      	beq.n	8003a52 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003a42:	2301      	movs	r3, #1
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	e004      	b.n	8003a52 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a48:	4b0e      	ldr	r3, [pc, #56]	@ (8003a84 <xTaskIncrementTick+0x170>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	4a0d      	ldr	r2, [pc, #52]	@ (8003a84 <xTaskIncrementTick+0x170>)
 8003a50:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a52:	697b      	ldr	r3, [r7, #20]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20000cd0 	.word	0x20000cd0
 8003a60:	20000cac 	.word	0x20000cac
 8003a64:	20000c60 	.word	0x20000c60
 8003a68:	20000c64 	.word	0x20000c64
 8003a6c:	20000cc0 	.word	0x20000cc0
 8003a70:	20000cc8 	.word	0x20000cc8
 8003a74:	20000cb0 	.word	0x20000cb0
 8003a78:	200007d8 	.word	0x200007d8
 8003a7c:	200007d4 	.word	0x200007d4
 8003a80:	20000cbc 	.word	0x20000cbc
 8003a84:	20000cb8 	.word	0x20000cb8

08003a88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a8e:	4b28      	ldr	r3, [pc, #160]	@ (8003b30 <vTaskSwitchContext+0xa8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a96:	4b27      	ldr	r3, [pc, #156]	@ (8003b34 <vTaskSwitchContext+0xac>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a9c:	e042      	b.n	8003b24 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003a9e:	4b25      	ldr	r3, [pc, #148]	@ (8003b34 <vTaskSwitchContext+0xac>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aa4:	4b24      	ldr	r3, [pc, #144]	@ (8003b38 <vTaskSwitchContext+0xb0>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	e011      	b.n	8003ad0 <vTaskSwitchContext+0x48>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10b      	bne.n	8003aca <vTaskSwitchContext+0x42>
	__asm volatile
 8003ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab6:	f383 8811 	msr	BASEPRI, r3
 8003aba:	f3bf 8f6f 	isb	sy
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	607b      	str	r3, [r7, #4]
}
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop
 8003ac8:	e7fd      	b.n	8003ac6 <vTaskSwitchContext+0x3e>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3b01      	subs	r3, #1
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	491a      	ldr	r1, [pc, #104]	@ (8003b3c <vTaskSwitchContext+0xb4>)
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0e3      	beq.n	8003aac <vTaskSwitchContext+0x24>
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4a13      	ldr	r2, [pc, #76]	@ (8003b3c <vTaskSwitchContext+0xb4>)
 8003af0:	4413      	add	r3, r2
 8003af2:	60bb      	str	r3, [r7, #8]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	605a      	str	r2, [r3, #4]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	3308      	adds	r3, #8
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d104      	bne.n	8003b14 <vTaskSwitchContext+0x8c>
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	605a      	str	r2, [r3, #4]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	4a09      	ldr	r2, [pc, #36]	@ (8003b40 <vTaskSwitchContext+0xb8>)
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	4a06      	ldr	r2, [pc, #24]	@ (8003b38 <vTaskSwitchContext+0xb0>)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6013      	str	r3, [r2, #0]
}
 8003b24:	bf00      	nop
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	20000cd0 	.word	0x20000cd0
 8003b34:	20000cbc 	.word	0x20000cbc
 8003b38:	20000cb0 	.word	0x20000cb0
 8003b3c:	200007d8 	.word	0x200007d8
 8003b40:	200007d4 	.word	0x200007d4

08003b44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10b      	bne.n	8003b6c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	60fb      	str	r3, [r7, #12]
}
 8003b66:	bf00      	nop
 8003b68:	bf00      	nop
 8003b6a:	e7fd      	b.n	8003b68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b6c:	4b07      	ldr	r3, [pc, #28]	@ (8003b8c <vTaskPlaceOnEventList+0x48>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3318      	adds	r3, #24
 8003b72:	4619      	mov	r1, r3
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7fe fe34 	bl	80027e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	6838      	ldr	r0, [r7, #0]
 8003b7e:	f000 fa81 	bl	8004084 <prvAddCurrentTaskToDelayedList>
}
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	200007d4 	.word	0x200007d4

08003b90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10b      	bne.n	8003bba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba6:	f383 8811 	msr	BASEPRI, r3
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	617b      	str	r3, [r7, #20]
}
 8003bb4:	bf00      	nop
 8003bb6:	bf00      	nop
 8003bb8:	e7fd      	b.n	8003bb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bba:	4b0a      	ldr	r3, [pc, #40]	@ (8003be4 <vTaskPlaceOnEventListRestricted+0x54>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3318      	adds	r3, #24
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f7fe fde9 	bl	800279a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003bce:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	68b8      	ldr	r0, [r7, #8]
 8003bd8:	f000 fa54 	bl	8004084 <prvAddCurrentTaskToDelayedList>
	}
 8003bdc:	bf00      	nop
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	200007d4 	.word	0x200007d4

08003be8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10b      	bne.n	8003c16 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	60fb      	str	r3, [r7, #12]
}
 8003c10:	bf00      	nop
 8003c12:	bf00      	nop
 8003c14:	e7fd      	b.n	8003c12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	3318      	adds	r3, #24
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fe fe1a 	bl	8002854 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c20:	4b1d      	ldr	r3, [pc, #116]	@ (8003c98 <xTaskRemoveFromEventList+0xb0>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d11d      	bne.n	8003c64 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fe fe11 	bl	8002854 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c36:	4b19      	ldr	r3, [pc, #100]	@ (8003c9c <xTaskRemoveFromEventList+0xb4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d903      	bls.n	8003c46 <xTaskRemoveFromEventList+0x5e>
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c42:	4a16      	ldr	r2, [pc, #88]	@ (8003c9c <xTaskRemoveFromEventList+0xb4>)
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4a13      	ldr	r2, [pc, #76]	@ (8003ca0 <xTaskRemoveFromEventList+0xb8>)
 8003c54:	441a      	add	r2, r3
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	f7fe fd9c 	bl	800279a <vListInsertEnd>
 8003c62:	e005      	b.n	8003c70 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	3318      	adds	r3, #24
 8003c68:	4619      	mov	r1, r3
 8003c6a:	480e      	ldr	r0, [pc, #56]	@ (8003ca4 <xTaskRemoveFromEventList+0xbc>)
 8003c6c:	f7fe fd95 	bl	800279a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c74:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca8 <xTaskRemoveFromEventList+0xc0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d905      	bls.n	8003c8a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c82:	4b0a      	ldr	r3, [pc, #40]	@ (8003cac <xTaskRemoveFromEventList+0xc4>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	e001      	b.n	8003c8e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c8e:	697b      	ldr	r3, [r7, #20]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20000cd0 	.word	0x20000cd0
 8003c9c:	20000cb0 	.word	0x20000cb0
 8003ca0:	200007d8 	.word	0x200007d8
 8003ca4:	20000c68 	.word	0x20000c68
 8003ca8:	200007d4 	.word	0x200007d4
 8003cac:	20000cbc 	.word	0x20000cbc

08003cb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003cb8:	4b06      	ldr	r3, [pc, #24]	@ (8003cd4 <vTaskInternalSetTimeOutState+0x24>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003cc0:	4b05      	ldr	r3, [pc, #20]	@ (8003cd8 <vTaskInternalSetTimeOutState+0x28>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	605a      	str	r2, [r3, #4]
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	20000cc0 	.word	0x20000cc0
 8003cd8:	20000cac 	.word	0x20000cac

08003cdc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10b      	bne.n	8003d04 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	613b      	str	r3, [r7, #16]
}
 8003cfe:	bf00      	nop
 8003d00:	bf00      	nop
 8003d02:	e7fd      	b.n	8003d00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10b      	bne.n	8003d22 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	60fb      	str	r3, [r7, #12]
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	e7fd      	b.n	8003d1e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003d22:	f000 fe91 	bl	8004a48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d26:	4b1d      	ldr	r3, [pc, #116]	@ (8003d9c <xTaskCheckForTimeOut+0xc0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3e:	d102      	bne.n	8003d46 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d40:	2300      	movs	r3, #0
 8003d42:	61fb      	str	r3, [r7, #28]
 8003d44:	e023      	b.n	8003d8e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	4b15      	ldr	r3, [pc, #84]	@ (8003da0 <xTaskCheckForTimeOut+0xc4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d007      	beq.n	8003d62 <xTaskCheckForTimeOut+0x86>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d302      	bcc.n	8003d62 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	61fb      	str	r3, [r7, #28]
 8003d60:	e015      	b.n	8003d8e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d20b      	bcs.n	8003d84 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	1ad2      	subs	r2, r2, r3
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff ff99 	bl	8003cb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	e004      	b.n	8003d8e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d8e:	f000 fe8d 	bl	8004aac <vPortExitCritical>

	return xReturn;
 8003d92:	69fb      	ldr	r3, [r7, #28]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3720      	adds	r7, #32
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	20000cac 	.word	0x20000cac
 8003da0:	20000cc0 	.word	0x20000cc0

08003da4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003da8:	4b03      	ldr	r3, [pc, #12]	@ (8003db8 <vTaskMissedYield+0x14>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]
}
 8003dae:	bf00      	nop
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	20000cbc 	.word	0x20000cbc

08003dbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003dc4:	f000 f852 	bl	8003e6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003dc8:	4b06      	ldr	r3, [pc, #24]	@ (8003de4 <prvIdleTask+0x28>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d9f9      	bls.n	8003dc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003dd0:	4b05      	ldr	r3, [pc, #20]	@ (8003de8 <prvIdleTask+0x2c>)
 8003dd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003de0:	e7f0      	b.n	8003dc4 <prvIdleTask+0x8>
 8003de2:	bf00      	nop
 8003de4:	200007d8 	.word	0x200007d8
 8003de8:	e000ed04 	.word	0xe000ed04

08003dec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003df2:	2300      	movs	r3, #0
 8003df4:	607b      	str	r3, [r7, #4]
 8003df6:	e00c      	b.n	8003e12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4a12      	ldr	r2, [pc, #72]	@ (8003e4c <prvInitialiseTaskLists+0x60>)
 8003e04:	4413      	add	r3, r2
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe fc9a 	bl	8002740 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	607b      	str	r3, [r7, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b37      	cmp	r3, #55	@ 0x37
 8003e16:	d9ef      	bls.n	8003df8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e18:	480d      	ldr	r0, [pc, #52]	@ (8003e50 <prvInitialiseTaskLists+0x64>)
 8003e1a:	f7fe fc91 	bl	8002740 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e1e:	480d      	ldr	r0, [pc, #52]	@ (8003e54 <prvInitialiseTaskLists+0x68>)
 8003e20:	f7fe fc8e 	bl	8002740 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e24:	480c      	ldr	r0, [pc, #48]	@ (8003e58 <prvInitialiseTaskLists+0x6c>)
 8003e26:	f7fe fc8b 	bl	8002740 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e2a:	480c      	ldr	r0, [pc, #48]	@ (8003e5c <prvInitialiseTaskLists+0x70>)
 8003e2c:	f7fe fc88 	bl	8002740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e30:	480b      	ldr	r0, [pc, #44]	@ (8003e60 <prvInitialiseTaskLists+0x74>)
 8003e32:	f7fe fc85 	bl	8002740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e36:	4b0b      	ldr	r3, [pc, #44]	@ (8003e64 <prvInitialiseTaskLists+0x78>)
 8003e38:	4a05      	ldr	r2, [pc, #20]	@ (8003e50 <prvInitialiseTaskLists+0x64>)
 8003e3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e68 <prvInitialiseTaskLists+0x7c>)
 8003e3e:	4a05      	ldr	r2, [pc, #20]	@ (8003e54 <prvInitialiseTaskLists+0x68>)
 8003e40:	601a      	str	r2, [r3, #0]
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	200007d8 	.word	0x200007d8
 8003e50:	20000c38 	.word	0x20000c38
 8003e54:	20000c4c 	.word	0x20000c4c
 8003e58:	20000c68 	.word	0x20000c68
 8003e5c:	20000c7c 	.word	0x20000c7c
 8003e60:	20000c94 	.word	0x20000c94
 8003e64:	20000c60 	.word	0x20000c60
 8003e68:	20000c64 	.word	0x20000c64

08003e6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e72:	e019      	b.n	8003ea8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e74:	f000 fde8 	bl	8004a48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e78:	4b10      	ldr	r3, [pc, #64]	@ (8003ebc <prvCheckTasksWaitingTermination+0x50>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3304      	adds	r3, #4
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fe fce5 	bl	8002854 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec0 <prvCheckTasksWaitingTermination+0x54>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	4a0b      	ldr	r2, [pc, #44]	@ (8003ec0 <prvCheckTasksWaitingTermination+0x54>)
 8003e92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e94:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec4 <prvCheckTasksWaitingTermination+0x58>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec4 <prvCheckTasksWaitingTermination+0x58>)
 8003e9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e9e:	f000 fe05 	bl	8004aac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f810 	bl	8003ec8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ea8:	4b06      	ldr	r3, [pc, #24]	@ (8003ec4 <prvCheckTasksWaitingTermination+0x58>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1e1      	bne.n	8003e74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003eb0:	bf00      	nop
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000c7c 	.word	0x20000c7c
 8003ec0:	20000ca8 	.word	0x20000ca8
 8003ec4:	20000c90 	.word	0x20000c90

08003ec8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d108      	bne.n	8003eec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 ffa2 	bl	8004e28 <vPortFree>
				vPortFree( pxTCB );
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 ff9f 	bl	8004e28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003eea:	e019      	b.n	8003f20 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d103      	bne.n	8003efe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 ff96 	bl	8004e28 <vPortFree>
	}
 8003efc:	e010      	b.n	8003f20 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d00b      	beq.n	8003f20 <prvDeleteTCB+0x58>
	__asm volatile
 8003f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	60fb      	str	r3, [r7, #12]
}
 8003f1a:	bf00      	nop
 8003f1c:	bf00      	nop
 8003f1e:	e7fd      	b.n	8003f1c <prvDeleteTCB+0x54>
	}
 8003f20:	bf00      	nop
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f60 <prvResetNextTaskUnblockTime+0x38>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d104      	bne.n	8003f42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f38:	4b0a      	ldr	r3, [pc, #40]	@ (8003f64 <prvResetNextTaskUnblockTime+0x3c>)
 8003f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f40:	e008      	b.n	8003f54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f42:	4b07      	ldr	r3, [pc, #28]	@ (8003f60 <prvResetNextTaskUnblockTime+0x38>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	4a04      	ldr	r2, [pc, #16]	@ (8003f64 <prvResetNextTaskUnblockTime+0x3c>)
 8003f52:	6013      	str	r3, [r2, #0]
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	20000c60 	.word	0x20000c60
 8003f64:	20000cc8 	.word	0x20000cc8

08003f68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f9c <xTaskGetSchedulerState+0x34>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f76:	2301      	movs	r3, #1
 8003f78:	607b      	str	r3, [r7, #4]
 8003f7a:	e008      	b.n	8003f8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f7c:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <xTaskGetSchedulerState+0x38>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d102      	bne.n	8003f8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f84:	2302      	movs	r3, #2
 8003f86:	607b      	str	r3, [r7, #4]
 8003f88:	e001      	b.n	8003f8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f8e:	687b      	ldr	r3, [r7, #4]
	}
 8003f90:	4618      	mov	r0, r3
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	20000cb4 	.word	0x20000cb4
 8003fa0:	20000cd0 	.word	0x20000cd0

08003fa4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d058      	beq.n	800406c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003fba:	4b2f      	ldr	r3, [pc, #188]	@ (8004078 <xTaskPriorityDisinherit+0xd4>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d00b      	beq.n	8003fdc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	60fb      	str	r3, [r7, #12]
}
 8003fd6:	bf00      	nop
 8003fd8:	bf00      	nop
 8003fda:	e7fd      	b.n	8003fd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10b      	bne.n	8003ffc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	60bb      	str	r3, [r7, #8]
}
 8003ff6:	bf00      	nop
 8003ff8:	bf00      	nop
 8003ffa:	e7fd      	b.n	8003ff8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004000:	1e5a      	subs	r2, r3, #1
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800400e:	429a      	cmp	r2, r3
 8004010:	d02c      	beq.n	800406c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004016:	2b00      	cmp	r3, #0
 8004018:	d128      	bne.n	800406c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	3304      	adds	r3, #4
 800401e:	4618      	mov	r0, r3
 8004020:	f7fe fc18 	bl	8002854 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004030:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800403c:	4b0f      	ldr	r3, [pc, #60]	@ (800407c <xTaskPriorityDisinherit+0xd8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d903      	bls.n	800404c <xTaskPriorityDisinherit+0xa8>
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004048:	4a0c      	ldr	r2, [pc, #48]	@ (800407c <xTaskPriorityDisinherit+0xd8>)
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4a09      	ldr	r2, [pc, #36]	@ (8004080 <xTaskPriorityDisinherit+0xdc>)
 800405a:	441a      	add	r2, r3
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	3304      	adds	r3, #4
 8004060:	4619      	mov	r1, r3
 8004062:	4610      	mov	r0, r2
 8004064:	f7fe fb99 	bl	800279a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004068:	2301      	movs	r3, #1
 800406a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800406c:	697b      	ldr	r3, [r7, #20]
	}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	200007d4 	.word	0x200007d4
 800407c:	20000cb0 	.word	0x20000cb0
 8004080:	200007d8 	.word	0x200007d8

08004084 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800408e:	4b21      	ldr	r3, [pc, #132]	@ (8004114 <prvAddCurrentTaskToDelayedList+0x90>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004094:	4b20      	ldr	r3, [pc, #128]	@ (8004118 <prvAddCurrentTaskToDelayedList+0x94>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3304      	adds	r3, #4
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe fbda 	bl	8002854 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a6:	d10a      	bne.n	80040be <prvAddCurrentTaskToDelayedList+0x3a>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d007      	beq.n	80040be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004118 <prvAddCurrentTaskToDelayedList+0x94>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3304      	adds	r3, #4
 80040b4:	4619      	mov	r1, r3
 80040b6:	4819      	ldr	r0, [pc, #100]	@ (800411c <prvAddCurrentTaskToDelayedList+0x98>)
 80040b8:	f7fe fb6f 	bl	800279a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80040bc:	e026      	b.n	800410c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4413      	add	r3, r2
 80040c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040c6:	4b14      	ldr	r3, [pc, #80]	@ (8004118 <prvAddCurrentTaskToDelayedList+0x94>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d209      	bcs.n	80040ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040d6:	4b12      	ldr	r3, [pc, #72]	@ (8004120 <prvAddCurrentTaskToDelayedList+0x9c>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	4b0f      	ldr	r3, [pc, #60]	@ (8004118 <prvAddCurrentTaskToDelayedList+0x94>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3304      	adds	r3, #4
 80040e0:	4619      	mov	r1, r3
 80040e2:	4610      	mov	r0, r2
 80040e4:	f7fe fb7d 	bl	80027e2 <vListInsert>
}
 80040e8:	e010      	b.n	800410c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004124 <prvAddCurrentTaskToDelayedList+0xa0>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004118 <prvAddCurrentTaskToDelayedList+0x94>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3304      	adds	r3, #4
 80040f4:	4619      	mov	r1, r3
 80040f6:	4610      	mov	r0, r2
 80040f8:	f7fe fb73 	bl	80027e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80040fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004128 <prvAddCurrentTaskToDelayedList+0xa4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	429a      	cmp	r2, r3
 8004104:	d202      	bcs.n	800410c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004106:	4a08      	ldr	r2, [pc, #32]	@ (8004128 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	6013      	str	r3, [r2, #0]
}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	20000cac 	.word	0x20000cac
 8004118:	200007d4 	.word	0x200007d4
 800411c:	20000c94 	.word	0x20000c94
 8004120:	20000c64 	.word	0x20000c64
 8004124:	20000c60 	.word	0x20000c60
 8004128:	20000cc8 	.word	0x20000cc8

0800412c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08a      	sub	sp, #40	@ 0x28
 8004130:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004136:	f000 fb13 	bl	8004760 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800413a:	4b1d      	ldr	r3, [pc, #116]	@ (80041b0 <xTimerCreateTimerTask+0x84>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d021      	beq.n	8004186 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004146:	2300      	movs	r3, #0
 8004148:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800414a:	1d3a      	adds	r2, r7, #4
 800414c:	f107 0108 	add.w	r1, r7, #8
 8004150:	f107 030c 	add.w	r3, r7, #12
 8004154:	4618      	mov	r0, r3
 8004156:	f7fe fad9 	bl	800270c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	9202      	str	r2, [sp, #8]
 8004162:	9301      	str	r3, [sp, #4]
 8004164:	2302      	movs	r3, #2
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	2300      	movs	r3, #0
 800416a:	460a      	mov	r2, r1
 800416c:	4911      	ldr	r1, [pc, #68]	@ (80041b4 <xTimerCreateTimerTask+0x88>)
 800416e:	4812      	ldr	r0, [pc, #72]	@ (80041b8 <xTimerCreateTimerTask+0x8c>)
 8004170:	f7ff f8d0 	bl	8003314 <xTaskCreateStatic>
 8004174:	4603      	mov	r3, r0
 8004176:	4a11      	ldr	r2, [pc, #68]	@ (80041bc <xTimerCreateTimerTask+0x90>)
 8004178:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800417a:	4b10      	ldr	r3, [pc, #64]	@ (80041bc <xTimerCreateTimerTask+0x90>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004182:	2301      	movs	r3, #1
 8004184:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10b      	bne.n	80041a4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	613b      	str	r3, [r7, #16]
}
 800419e:	bf00      	nop
 80041a0:	bf00      	nop
 80041a2:	e7fd      	b.n	80041a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80041a4:	697b      	ldr	r3, [r7, #20]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000d04 	.word	0x20000d04
 80041b4:	08005b8c 	.word	0x08005b8c
 80041b8:	080042f9 	.word	0x080042f9
 80041bc:	20000d08 	.word	0x20000d08

080041c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08a      	sub	sp, #40	@ 0x28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10b      	bne.n	80041f0 <xTimerGenericCommand+0x30>
	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	623b      	str	r3, [r7, #32]
}
 80041ea:	bf00      	nop
 80041ec:	bf00      	nop
 80041ee:	e7fd      	b.n	80041ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80041f0:	4b19      	ldr	r3, [pc, #100]	@ (8004258 <xTimerGenericCommand+0x98>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d02a      	beq.n	800424e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2b05      	cmp	r3, #5
 8004208:	dc18      	bgt.n	800423c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800420a:	f7ff fead 	bl	8003f68 <xTaskGetSchedulerState>
 800420e:	4603      	mov	r3, r0
 8004210:	2b02      	cmp	r3, #2
 8004212:	d109      	bne.n	8004228 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004214:	4b10      	ldr	r3, [pc, #64]	@ (8004258 <xTimerGenericCommand+0x98>)
 8004216:	6818      	ldr	r0, [r3, #0]
 8004218:	f107 0110 	add.w	r1, r7, #16
 800421c:	2300      	movs	r3, #0
 800421e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004220:	f7fe fc88 	bl	8002b34 <xQueueGenericSend>
 8004224:	6278      	str	r0, [r7, #36]	@ 0x24
 8004226:	e012      	b.n	800424e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004228:	4b0b      	ldr	r3, [pc, #44]	@ (8004258 <xTimerGenericCommand+0x98>)
 800422a:	6818      	ldr	r0, [r3, #0]
 800422c:	f107 0110 	add.w	r1, r7, #16
 8004230:	2300      	movs	r3, #0
 8004232:	2200      	movs	r2, #0
 8004234:	f7fe fc7e 	bl	8002b34 <xQueueGenericSend>
 8004238:	6278      	str	r0, [r7, #36]	@ 0x24
 800423a:	e008      	b.n	800424e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800423c:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <xTimerGenericCommand+0x98>)
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	f107 0110 	add.w	r1, r7, #16
 8004244:	2300      	movs	r3, #0
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	f7fe fd76 	bl	8002d38 <xQueueGenericSendFromISR>
 800424c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004250:	4618      	mov	r0, r3
 8004252:	3728      	adds	r7, #40	@ 0x28
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20000d04 	.word	0x20000d04

0800425c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af02      	add	r7, sp, #8
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004266:	4b23      	ldr	r3, [pc, #140]	@ (80042f4 <prvProcessExpiredTimer+0x98>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	3304      	adds	r3, #4
 8004274:	4618      	mov	r0, r3
 8004276:	f7fe faed 	bl	8002854 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d023      	beq.n	80042d0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	699a      	ldr	r2, [r3, #24]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	18d1      	adds	r1, r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	6978      	ldr	r0, [r7, #20]
 8004296:	f000 f8d5 	bl	8004444 <prvInsertTimerInActiveList>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d020      	beq.n	80042e2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042a0:	2300      	movs	r3, #0
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	2300      	movs	r3, #0
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	2100      	movs	r1, #0
 80042aa:	6978      	ldr	r0, [r7, #20]
 80042ac:	f7ff ff88 	bl	80041c0 <xTimerGenericCommand>
 80042b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d114      	bne.n	80042e2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	60fb      	str	r3, [r7, #12]
}
 80042ca:	bf00      	nop
 80042cc:	bf00      	nop
 80042ce:	e7fd      	b.n	80042cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	6978      	ldr	r0, [r7, #20]
 80042e8:	4798      	blx	r3
}
 80042ea:	bf00      	nop
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	20000cfc 	.word	0x20000cfc

080042f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004300:	f107 0308 	add.w	r3, r7, #8
 8004304:	4618      	mov	r0, r3
 8004306:	f000 f859 	bl	80043bc <prvGetNextExpireTime>
 800430a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4619      	mov	r1, r3
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f805 	bl	8004320 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004316:	f000 f8d7 	bl	80044c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800431a:	bf00      	nop
 800431c:	e7f0      	b.n	8004300 <prvTimerTask+0x8>
	...

08004320 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800432a:	f7ff fa37 	bl	800379c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800432e:	f107 0308 	add.w	r3, r7, #8
 8004332:	4618      	mov	r0, r3
 8004334:	f000 f866 	bl	8004404 <prvSampleTimeNow>
 8004338:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d130      	bne.n	80043a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10a      	bne.n	800435c <prvProcessTimerOrBlockTask+0x3c>
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	429a      	cmp	r2, r3
 800434c:	d806      	bhi.n	800435c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800434e:	f7ff fa33 	bl	80037b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004352:	68f9      	ldr	r1, [r7, #12]
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7ff ff81 	bl	800425c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800435a:	e024      	b.n	80043a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d008      	beq.n	8004374 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004362:	4b13      	ldr	r3, [pc, #76]	@ (80043b0 <prvProcessTimerOrBlockTask+0x90>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <prvProcessTimerOrBlockTask+0x50>
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <prvProcessTimerOrBlockTask+0x52>
 8004370:	2300      	movs	r3, #0
 8004372:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004374:	4b0f      	ldr	r3, [pc, #60]	@ (80043b4 <prvProcessTimerOrBlockTask+0x94>)
 8004376:	6818      	ldr	r0, [r3, #0]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	4619      	mov	r1, r3
 8004382:	f7fe ff93 	bl	80032ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004386:	f7ff fa17 	bl	80037b8 <xTaskResumeAll>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10a      	bne.n	80043a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004390:	4b09      	ldr	r3, [pc, #36]	@ (80043b8 <prvProcessTimerOrBlockTask+0x98>)
 8004392:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	f3bf 8f6f 	isb	sy
}
 80043a0:	e001      	b.n	80043a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80043a2:	f7ff fa09 	bl	80037b8 <xTaskResumeAll>
}
 80043a6:	bf00      	nop
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	20000d00 	.word	0x20000d00
 80043b4:	20000d04 	.word	0x20000d04
 80043b8:	e000ed04 	.word	0xe000ed04

080043bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80043c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004400 <prvGetNextExpireTime+0x44>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <prvGetNextExpireTime+0x16>
 80043ce:	2201      	movs	r2, #1
 80043d0:	e000      	b.n	80043d4 <prvGetNextExpireTime+0x18>
 80043d2:	2200      	movs	r2, #0
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d105      	bne.n	80043ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043e0:	4b07      	ldr	r3, [pc, #28]	@ (8004400 <prvGetNextExpireTime+0x44>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	e001      	b.n	80043f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80043f0:	68fb      	ldr	r3, [r7, #12]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000cfc 	.word	0x20000cfc

08004404 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800440c:	f7ff fa72 	bl	80038f4 <xTaskGetTickCount>
 8004410:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004412:	4b0b      	ldr	r3, [pc, #44]	@ (8004440 <prvSampleTimeNow+0x3c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	429a      	cmp	r2, r3
 800441a:	d205      	bcs.n	8004428 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800441c:	f000 f93a 	bl	8004694 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	e002      	b.n	800442e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800442e:	4a04      	ldr	r2, [pc, #16]	@ (8004440 <prvSampleTimeNow+0x3c>)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004434:	68fb      	ldr	r3, [r7, #12]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20000d0c 	.word	0x20000d0c

08004444 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	429a      	cmp	r2, r3
 8004468:	d812      	bhi.n	8004490 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	1ad2      	subs	r2, r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	429a      	cmp	r2, r3
 8004476:	d302      	bcc.n	800447e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004478:	2301      	movs	r3, #1
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	e01b      	b.n	80044b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800447e:	4b10      	ldr	r3, [pc, #64]	@ (80044c0 <prvInsertTimerInActiveList+0x7c>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	3304      	adds	r3, #4
 8004486:	4619      	mov	r1, r3
 8004488:	4610      	mov	r0, r2
 800448a:	f7fe f9aa 	bl	80027e2 <vListInsert>
 800448e:	e012      	b.n	80044b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d206      	bcs.n	80044a6 <prvInsertTimerInActiveList+0x62>
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d302      	bcc.n	80044a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80044a0:	2301      	movs	r3, #1
 80044a2:	617b      	str	r3, [r7, #20]
 80044a4:	e007      	b.n	80044b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044a6:	4b07      	ldr	r3, [pc, #28]	@ (80044c4 <prvInsertTimerInActiveList+0x80>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3304      	adds	r3, #4
 80044ae:	4619      	mov	r1, r3
 80044b0:	4610      	mov	r0, r2
 80044b2:	f7fe f996 	bl	80027e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80044b6:	697b      	ldr	r3, [r7, #20]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	20000d00 	.word	0x20000d00
 80044c4:	20000cfc 	.word	0x20000cfc

080044c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08e      	sub	sp, #56	@ 0x38
 80044cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044ce:	e0ce      	b.n	800466e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	da19      	bge.n	800450a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80044d6:	1d3b      	adds	r3, r7, #4
 80044d8:	3304      	adds	r3, #4
 80044da:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80044dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10b      	bne.n	80044fa <prvProcessReceivedCommands+0x32>
	__asm volatile
 80044e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	61fb      	str	r3, [r7, #28]
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop
 80044f8:	e7fd      	b.n	80044f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80044fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004500:	6850      	ldr	r0, [r2, #4]
 8004502:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004504:	6892      	ldr	r2, [r2, #8]
 8004506:	4611      	mov	r1, r2
 8004508:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	f2c0 80ae 	blt.w	800466e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d004      	beq.n	8004528 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800451e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004520:	3304      	adds	r3, #4
 8004522:	4618      	mov	r0, r3
 8004524:	f7fe f996 	bl	8002854 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004528:	463b      	mov	r3, r7
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff ff6a 	bl	8004404 <prvSampleTimeNow>
 8004530:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b09      	cmp	r3, #9
 8004536:	f200 8097 	bhi.w	8004668 <prvProcessReceivedCommands+0x1a0>
 800453a:	a201      	add	r2, pc, #4	@ (adr r2, 8004540 <prvProcessReceivedCommands+0x78>)
 800453c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004540:	08004569 	.word	0x08004569
 8004544:	08004569 	.word	0x08004569
 8004548:	08004569 	.word	0x08004569
 800454c:	080045df 	.word	0x080045df
 8004550:	080045f3 	.word	0x080045f3
 8004554:	0800463f 	.word	0x0800463f
 8004558:	08004569 	.word	0x08004569
 800455c:	08004569 	.word	0x08004569
 8004560:	080045df 	.word	0x080045df
 8004564:	080045f3 	.word	0x080045f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	b2da      	uxtb	r2, r3
 8004574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004576:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	18d1      	adds	r1, r2, r3
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004586:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004588:	f7ff ff5c 	bl	8004444 <prvInsertTimerInActiveList>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d06c      	beq.n	800466c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004598:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800459a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d061      	beq.n	800466c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	441a      	add	r2, r3
 80045b0:	2300      	movs	r3, #0
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	2300      	movs	r3, #0
 80045b6:	2100      	movs	r1, #0
 80045b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045ba:	f7ff fe01 	bl	80041c0 <xTimerGenericCommand>
 80045be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d152      	bne.n	800466c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80045c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	61bb      	str	r3, [r7, #24]
}
 80045d8:	bf00      	nop
 80045da:	bf00      	nop
 80045dc:	e7fd      	b.n	80045da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80045f0:	e03d      	b.n	800466e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80045f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045f8:	f043 0301 	orr.w	r3, r3, #1
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004600:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004608:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800460a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10b      	bne.n	800462a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	617b      	str	r3, [r7, #20]
}
 8004624:	bf00      	nop
 8004626:	bf00      	nop
 8004628:	e7fd      	b.n	8004626 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800462a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004630:	18d1      	adds	r1, r2, r3
 8004632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004636:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004638:	f7ff ff04 	bl	8004444 <prvInsertTimerInActiveList>
					break;
 800463c:	e017      	b.n	800466e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800463e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004640:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d103      	bne.n	8004654 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800464c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800464e:	f000 fbeb 	bl	8004e28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004652:	e00c      	b.n	800466e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004656:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800465a:	f023 0301 	bic.w	r3, r3, #1
 800465e:	b2da      	uxtb	r2, r3
 8004660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004662:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004666:	e002      	b.n	800466e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004668:	bf00      	nop
 800466a:	e000      	b.n	800466e <prvProcessReceivedCommands+0x1a6>
					break;
 800466c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800466e:	4b08      	ldr	r3, [pc, #32]	@ (8004690 <prvProcessReceivedCommands+0x1c8>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	1d39      	adds	r1, r7, #4
 8004674:	2200      	movs	r2, #0
 8004676:	4618      	mov	r0, r3
 8004678:	f7fe fbfc 	bl	8002e74 <xQueueReceive>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	f47f af26 	bne.w	80044d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop
 8004688:	3730      	adds	r7, #48	@ 0x30
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20000d04 	.word	0x20000d04

08004694 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b088      	sub	sp, #32
 8004698:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800469a:	e049      	b.n	8004730 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800469c:	4b2e      	ldr	r3, [pc, #184]	@ (8004758 <prvSwitchTimerLists+0xc4>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046a6:	4b2c      	ldr	r3, [pc, #176]	@ (8004758 <prvSwitchTimerLists+0xc4>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	3304      	adds	r3, #4
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fe f8cd 	bl	8002854 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d02f      	beq.n	8004730 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4413      	add	r3, r2
 80046d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d90e      	bls.n	8004700 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004758 <prvSwitchTimerLists+0xc4>)
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	3304      	adds	r3, #4
 80046f6:	4619      	mov	r1, r3
 80046f8:	4610      	mov	r0, r2
 80046fa:	f7fe f872 	bl	80027e2 <vListInsert>
 80046fe:	e017      	b.n	8004730 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004700:	2300      	movs	r3, #0
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	2300      	movs	r3, #0
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	2100      	movs	r1, #0
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f7ff fd58 	bl	80041c0 <xTimerGenericCommand>
 8004710:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10b      	bne.n	8004730 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	603b      	str	r3, [r7, #0]
}
 800472a:	bf00      	nop
 800472c:	bf00      	nop
 800472e:	e7fd      	b.n	800472c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004730:	4b09      	ldr	r3, [pc, #36]	@ (8004758 <prvSwitchTimerLists+0xc4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1b0      	bne.n	800469c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800473a:	4b07      	ldr	r3, [pc, #28]	@ (8004758 <prvSwitchTimerLists+0xc4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004740:	4b06      	ldr	r3, [pc, #24]	@ (800475c <prvSwitchTimerLists+0xc8>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a04      	ldr	r2, [pc, #16]	@ (8004758 <prvSwitchTimerLists+0xc4>)
 8004746:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004748:	4a04      	ldr	r2, [pc, #16]	@ (800475c <prvSwitchTimerLists+0xc8>)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	6013      	str	r3, [r2, #0]
}
 800474e:	bf00      	nop
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	20000cfc 	.word	0x20000cfc
 800475c:	20000d00 	.word	0x20000d00

08004760 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004766:	f000 f96f 	bl	8004a48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800476a:	4b15      	ldr	r3, [pc, #84]	@ (80047c0 <prvCheckForValidListAndQueue+0x60>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d120      	bne.n	80047b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004772:	4814      	ldr	r0, [pc, #80]	@ (80047c4 <prvCheckForValidListAndQueue+0x64>)
 8004774:	f7fd ffe4 	bl	8002740 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004778:	4813      	ldr	r0, [pc, #76]	@ (80047c8 <prvCheckForValidListAndQueue+0x68>)
 800477a:	f7fd ffe1 	bl	8002740 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800477e:	4b13      	ldr	r3, [pc, #76]	@ (80047cc <prvCheckForValidListAndQueue+0x6c>)
 8004780:	4a10      	ldr	r2, [pc, #64]	@ (80047c4 <prvCheckForValidListAndQueue+0x64>)
 8004782:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004784:	4b12      	ldr	r3, [pc, #72]	@ (80047d0 <prvCheckForValidListAndQueue+0x70>)
 8004786:	4a10      	ldr	r2, [pc, #64]	@ (80047c8 <prvCheckForValidListAndQueue+0x68>)
 8004788:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800478a:	2300      	movs	r3, #0
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	4b11      	ldr	r3, [pc, #68]	@ (80047d4 <prvCheckForValidListAndQueue+0x74>)
 8004790:	4a11      	ldr	r2, [pc, #68]	@ (80047d8 <prvCheckForValidListAndQueue+0x78>)
 8004792:	2110      	movs	r1, #16
 8004794:	200a      	movs	r0, #10
 8004796:	f7fe f8f1 	bl	800297c <xQueueGenericCreateStatic>
 800479a:	4603      	mov	r3, r0
 800479c:	4a08      	ldr	r2, [pc, #32]	@ (80047c0 <prvCheckForValidListAndQueue+0x60>)
 800479e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80047a0:	4b07      	ldr	r3, [pc, #28]	@ (80047c0 <prvCheckForValidListAndQueue+0x60>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80047a8:	4b05      	ldr	r3, [pc, #20]	@ (80047c0 <prvCheckForValidListAndQueue+0x60>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	490b      	ldr	r1, [pc, #44]	@ (80047dc <prvCheckForValidListAndQueue+0x7c>)
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe fd52 	bl	8003258 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047b4:	f000 f97a 	bl	8004aac <vPortExitCritical>
}
 80047b8:	bf00      	nop
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	20000d04 	.word	0x20000d04
 80047c4:	20000cd4 	.word	0x20000cd4
 80047c8:	20000ce8 	.word	0x20000ce8
 80047cc:	20000cfc 	.word	0x20000cfc
 80047d0:	20000d00 	.word	0x20000d00
 80047d4:	20000db0 	.word	0x20000db0
 80047d8:	20000d10 	.word	0x20000d10
 80047dc:	08005b94 	.word	0x08005b94

080047e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	3b04      	subs	r3, #4
 80047f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3b04      	subs	r3, #4
 80047fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f023 0201 	bic.w	r2, r3, #1
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3b04      	subs	r3, #4
 800480e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004810:	4a0c      	ldr	r2, [pc, #48]	@ (8004844 <pxPortInitialiseStack+0x64>)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3b14      	subs	r3, #20
 800481a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3b04      	subs	r3, #4
 8004826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f06f 0202 	mvn.w	r2, #2
 800482e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	3b20      	subs	r3, #32
 8004834:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004836:	68fb      	ldr	r3, [r7, #12]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	08004849 	.word	0x08004849

08004848 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800484e:	2300      	movs	r3, #0
 8004850:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004852:	4b13      	ldr	r3, [pc, #76]	@ (80048a0 <prvTaskExitError+0x58>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485a:	d00b      	beq.n	8004874 <prvTaskExitError+0x2c>
	__asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	60fb      	str	r3, [r7, #12]
}
 800486e:	bf00      	nop
 8004870:	bf00      	nop
 8004872:	e7fd      	b.n	8004870 <prvTaskExitError+0x28>
	__asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	60bb      	str	r3, [r7, #8]
}
 8004886:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004888:	bf00      	nop
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0fc      	beq.n	800488a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004890:	bf00      	nop
 8004892:	bf00      	nop
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	2000000c 	.word	0x2000000c
	...

080048b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80048b0:	4b07      	ldr	r3, [pc, #28]	@ (80048d0 <pxCurrentTCBConst2>)
 80048b2:	6819      	ldr	r1, [r3, #0]
 80048b4:	6808      	ldr	r0, [r1, #0]
 80048b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ba:	f380 8809 	msr	PSP, r0
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	f04f 0000 	mov.w	r0, #0
 80048c6:	f380 8811 	msr	BASEPRI, r0
 80048ca:	4770      	bx	lr
 80048cc:	f3af 8000 	nop.w

080048d0 <pxCurrentTCBConst2>:
 80048d0:	200007d4 	.word	0x200007d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80048d4:	bf00      	nop
 80048d6:	bf00      	nop

080048d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80048d8:	4808      	ldr	r0, [pc, #32]	@ (80048fc <prvPortStartFirstTask+0x24>)
 80048da:	6800      	ldr	r0, [r0, #0]
 80048dc:	6800      	ldr	r0, [r0, #0]
 80048de:	f380 8808 	msr	MSP, r0
 80048e2:	f04f 0000 	mov.w	r0, #0
 80048e6:	f380 8814 	msr	CONTROL, r0
 80048ea:	b662      	cpsie	i
 80048ec:	b661      	cpsie	f
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	df00      	svc	0
 80048f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80048fa:	bf00      	nop
 80048fc:	e000ed08 	.word	0xe000ed08

08004900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004906:	4b47      	ldr	r3, [pc, #284]	@ (8004a24 <xPortStartScheduler+0x124>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a47      	ldr	r2, [pc, #284]	@ (8004a28 <xPortStartScheduler+0x128>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d10b      	bne.n	8004928 <xPortStartScheduler+0x28>
	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	60fb      	str	r3, [r7, #12]
}
 8004922:	bf00      	nop
 8004924:	bf00      	nop
 8004926:	e7fd      	b.n	8004924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004928:	4b3e      	ldr	r3, [pc, #248]	@ (8004a24 <xPortStartScheduler+0x124>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a3f      	ldr	r2, [pc, #252]	@ (8004a2c <xPortStartScheduler+0x12c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d10b      	bne.n	800494a <xPortStartScheduler+0x4a>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	613b      	str	r3, [r7, #16]
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	e7fd      	b.n	8004946 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800494a:	4b39      	ldr	r3, [pc, #228]	@ (8004a30 <xPortStartScheduler+0x130>)
 800494c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	22ff      	movs	r2, #255	@ 0xff
 800495a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	b2db      	uxtb	r3, r3
 8004962:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800496c:	b2da      	uxtb	r2, r3
 800496e:	4b31      	ldr	r3, [pc, #196]	@ (8004a34 <xPortStartScheduler+0x134>)
 8004970:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004972:	4b31      	ldr	r3, [pc, #196]	@ (8004a38 <xPortStartScheduler+0x138>)
 8004974:	2207      	movs	r2, #7
 8004976:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004978:	e009      	b.n	800498e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800497a:	4b2f      	ldr	r3, [pc, #188]	@ (8004a38 <xPortStartScheduler+0x138>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3b01      	subs	r3, #1
 8004980:	4a2d      	ldr	r2, [pc, #180]	@ (8004a38 <xPortStartScheduler+0x138>)
 8004982:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	b2db      	uxtb	r3, r3
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	b2db      	uxtb	r3, r3
 800498c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800498e:	78fb      	ldrb	r3, [r7, #3]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004996:	2b80      	cmp	r3, #128	@ 0x80
 8004998:	d0ef      	beq.n	800497a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800499a:	4b27      	ldr	r3, [pc, #156]	@ (8004a38 <xPortStartScheduler+0x138>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f1c3 0307 	rsb	r3, r3, #7
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d00b      	beq.n	80049be <xPortStartScheduler+0xbe>
	__asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	60bb      	str	r3, [r7, #8]
}
 80049b8:	bf00      	nop
 80049ba:	bf00      	nop
 80049bc:	e7fd      	b.n	80049ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049be:	4b1e      	ldr	r3, [pc, #120]	@ (8004a38 <xPortStartScheduler+0x138>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004a38 <xPortStartScheduler+0x138>)
 80049c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a38 <xPortStartScheduler+0x138>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80049d0:	4a19      	ldr	r2, [pc, #100]	@ (8004a38 <xPortStartScheduler+0x138>)
 80049d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049dc:	4b17      	ldr	r3, [pc, #92]	@ (8004a3c <xPortStartScheduler+0x13c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a16      	ldr	r2, [pc, #88]	@ (8004a3c <xPortStartScheduler+0x13c>)
 80049e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049e8:	4b14      	ldr	r3, [pc, #80]	@ (8004a3c <xPortStartScheduler+0x13c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a13      	ldr	r2, [pc, #76]	@ (8004a3c <xPortStartScheduler+0x13c>)
 80049ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80049f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80049f4:	f000 f8da 	bl	8004bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049f8:	4b11      	ldr	r3, [pc, #68]	@ (8004a40 <xPortStartScheduler+0x140>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80049fe:	f000 f8f9 	bl	8004bf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a02:	4b10      	ldr	r3, [pc, #64]	@ (8004a44 <xPortStartScheduler+0x144>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a0f      	ldr	r2, [pc, #60]	@ (8004a44 <xPortStartScheduler+0x144>)
 8004a08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004a0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a0e:	f7ff ff63 	bl	80048d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a12:	f7ff f839 	bl	8003a88 <vTaskSwitchContext>
	prvTaskExitError();
 8004a16:	f7ff ff17 	bl	8004848 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	e000ed00 	.word	0xe000ed00
 8004a28:	410fc271 	.word	0x410fc271
 8004a2c:	410fc270 	.word	0x410fc270
 8004a30:	e000e400 	.word	0xe000e400
 8004a34:	20000e00 	.word	0x20000e00
 8004a38:	20000e04 	.word	0x20000e04
 8004a3c:	e000ed20 	.word	0xe000ed20
 8004a40:	2000000c 	.word	0x2000000c
 8004a44:	e000ef34 	.word	0xe000ef34

08004a48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	607b      	str	r3, [r7, #4]
}
 8004a60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a62:	4b10      	ldr	r3, [pc, #64]	@ (8004aa4 <vPortEnterCritical+0x5c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3301      	adds	r3, #1
 8004a68:	4a0e      	ldr	r2, [pc, #56]	@ (8004aa4 <vPortEnterCritical+0x5c>)
 8004a6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa4 <vPortEnterCritical+0x5c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d110      	bne.n	8004a96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a74:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa8 <vPortEnterCritical+0x60>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00b      	beq.n	8004a96 <vPortEnterCritical+0x4e>
	__asm volatile
 8004a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	603b      	str	r3, [r7, #0]
}
 8004a90:	bf00      	nop
 8004a92:	bf00      	nop
 8004a94:	e7fd      	b.n	8004a92 <vPortEnterCritical+0x4a>
	}
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	2000000c 	.word	0x2000000c
 8004aa8:	e000ed04 	.word	0xe000ed04

08004aac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ab2:	4b12      	ldr	r3, [pc, #72]	@ (8004afc <vPortExitCritical+0x50>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10b      	bne.n	8004ad2 <vPortExitCritical+0x26>
	__asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	607b      	str	r3, [r7, #4]
}
 8004acc:	bf00      	nop
 8004ace:	bf00      	nop
 8004ad0:	e7fd      	b.n	8004ace <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8004afc <vPortExitCritical+0x50>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	4a08      	ldr	r2, [pc, #32]	@ (8004afc <vPortExitCritical+0x50>)
 8004ada:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004adc:	4b07      	ldr	r3, [pc, #28]	@ (8004afc <vPortExitCritical+0x50>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d105      	bne.n	8004af0 <vPortExitCritical+0x44>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	f383 8811 	msr	BASEPRI, r3
}
 8004aee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	2000000c 	.word	0x2000000c

08004b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b00:	f3ef 8009 	mrs	r0, PSP
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	4b15      	ldr	r3, [pc, #84]	@ (8004b60 <pxCurrentTCBConst>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	f01e 0f10 	tst.w	lr, #16
 8004b10:	bf08      	it	eq
 8004b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1a:	6010      	str	r0, [r2, #0]
 8004b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004b24:	f380 8811 	msr	BASEPRI, r0
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f7fe ffaa 	bl	8003a88 <vTaskSwitchContext>
 8004b34:	f04f 0000 	mov.w	r0, #0
 8004b38:	f380 8811 	msr	BASEPRI, r0
 8004b3c:	bc09      	pop	{r0, r3}
 8004b3e:	6819      	ldr	r1, [r3, #0]
 8004b40:	6808      	ldr	r0, [r1, #0]
 8004b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b46:	f01e 0f10 	tst.w	lr, #16
 8004b4a:	bf08      	it	eq
 8004b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b50:	f380 8809 	msr	PSP, r0
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	f3af 8000 	nop.w

08004b60 <pxCurrentTCBConst>:
 8004b60:	200007d4 	.word	0x200007d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b64:	bf00      	nop
 8004b66:	bf00      	nop

08004b68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	607b      	str	r3, [r7, #4]
}
 8004b80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b82:	f7fe fec7 	bl	8003914 <xTaskIncrementTick>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b8c:	4b06      	ldr	r3, [pc, #24]	@ (8004ba8 <xPortSysTickHandler+0x40>)
 8004b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	2300      	movs	r3, #0
 8004b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	f383 8811 	msr	BASEPRI, r3
}
 8004b9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ba0:	bf00      	nop
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	e000ed04 	.word	0xe000ed04

08004bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004be0 <vPortSetupTimerInterrupt+0x34>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004be4 <vPortSetupTimerInterrupt+0x38>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004be8 <vPortSetupTimerInterrupt+0x3c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8004bec <vPortSetupTimerInterrupt+0x40>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	099b      	lsrs	r3, r3, #6
 8004bc8:	4a09      	ldr	r2, [pc, #36]	@ (8004bf0 <vPortSetupTimerInterrupt+0x44>)
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004bce:	4b04      	ldr	r3, [pc, #16]	@ (8004be0 <vPortSetupTimerInterrupt+0x34>)
 8004bd0:	2207      	movs	r2, #7
 8004bd2:	601a      	str	r2, [r3, #0]
}
 8004bd4:	bf00      	nop
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	e000e010 	.word	0xe000e010
 8004be4:	e000e018 	.word	0xe000e018
 8004be8:	20000000 	.word	0x20000000
 8004bec:	10624dd3 	.word	0x10624dd3
 8004bf0:	e000e014 	.word	0xe000e014

08004bf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004bf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004c04 <vPortEnableVFP+0x10>
 8004bf8:	6801      	ldr	r1, [r0, #0]
 8004bfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004bfe:	6001      	str	r1, [r0, #0]
 8004c00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c02:	bf00      	nop
 8004c04:	e000ed88 	.word	0xe000ed88

08004c08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c0e:	f3ef 8305 	mrs	r3, IPSR
 8004c12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b0f      	cmp	r3, #15
 8004c18:	d915      	bls.n	8004c46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c1a:	4a18      	ldr	r2, [pc, #96]	@ (8004c7c <vPortValidateInterruptPriority+0x74>)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4413      	add	r3, r2
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c24:	4b16      	ldr	r3, [pc, #88]	@ (8004c80 <vPortValidateInterruptPriority+0x78>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	7afa      	ldrb	r2, [r7, #11]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d20b      	bcs.n	8004c46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	607b      	str	r3, [r7, #4]
}
 8004c40:	bf00      	nop
 8004c42:	bf00      	nop
 8004c44:	e7fd      	b.n	8004c42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c46:	4b0f      	ldr	r3, [pc, #60]	@ (8004c84 <vPortValidateInterruptPriority+0x7c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c88 <vPortValidateInterruptPriority+0x80>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d90b      	bls.n	8004c6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	603b      	str	r3, [r7, #0]
}
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	e7fd      	b.n	8004c6a <vPortValidateInterruptPriority+0x62>
	}
 8004c6e:	bf00      	nop
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	e000e3f0 	.word	0xe000e3f0
 8004c80:	20000e00 	.word	0x20000e00
 8004c84:	e000ed0c 	.word	0xe000ed0c
 8004c88:	20000e04 	.word	0x20000e04

08004c8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08a      	sub	sp, #40	@ 0x28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c98:	f7fe fd80 	bl	800379c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c9c:	4b5c      	ldr	r3, [pc, #368]	@ (8004e10 <pvPortMalloc+0x184>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ca4:	f000 f924 	bl	8004ef0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ca8:	4b5a      	ldr	r3, [pc, #360]	@ (8004e14 <pvPortMalloc+0x188>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f040 8095 	bne.w	8004de0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01e      	beq.n	8004cfa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004cbc:	2208      	movs	r2, #8
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d015      	beq.n	8004cfa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f023 0307 	bic.w	r3, r3, #7
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00b      	beq.n	8004cfa <pvPortMalloc+0x6e>
	__asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	617b      	str	r3, [r7, #20]
}
 8004cf4:	bf00      	nop
 8004cf6:	bf00      	nop
 8004cf8:	e7fd      	b.n	8004cf6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d06f      	beq.n	8004de0 <pvPortMalloc+0x154>
 8004d00:	4b45      	ldr	r3, [pc, #276]	@ (8004e18 <pvPortMalloc+0x18c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d86a      	bhi.n	8004de0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d0a:	4b44      	ldr	r3, [pc, #272]	@ (8004e1c <pvPortMalloc+0x190>)
 8004d0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d0e:	4b43      	ldr	r3, [pc, #268]	@ (8004e1c <pvPortMalloc+0x190>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d14:	e004      	b.n	8004d20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d903      	bls.n	8004d32 <pvPortMalloc+0xa6>
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f1      	bne.n	8004d16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d32:	4b37      	ldr	r3, [pc, #220]	@ (8004e10 <pvPortMalloc+0x184>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d051      	beq.n	8004de0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2208      	movs	r2, #8
 8004d42:	4413      	add	r3, r2
 8004d44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	1ad2      	subs	r2, r2, r3
 8004d56:	2308      	movs	r3, #8
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d920      	bls.n	8004da0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4413      	add	r3, r2
 8004d64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00b      	beq.n	8004d88 <pvPortMalloc+0xfc>
	__asm volatile
 8004d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	613b      	str	r3, [r7, #16]
}
 8004d82:	bf00      	nop
 8004d84:	bf00      	nop
 8004d86:	e7fd      	b.n	8004d84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	1ad2      	subs	r2, r2, r3
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d9a:	69b8      	ldr	r0, [r7, #24]
 8004d9c:	f000 f90a 	bl	8004fb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004da0:	4b1d      	ldr	r3, [pc, #116]	@ (8004e18 <pvPortMalloc+0x18c>)
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	4a1b      	ldr	r2, [pc, #108]	@ (8004e18 <pvPortMalloc+0x18c>)
 8004dac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dae:	4b1a      	ldr	r3, [pc, #104]	@ (8004e18 <pvPortMalloc+0x18c>)
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4b1b      	ldr	r3, [pc, #108]	@ (8004e20 <pvPortMalloc+0x194>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d203      	bcs.n	8004dc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004dba:	4b17      	ldr	r3, [pc, #92]	@ (8004e18 <pvPortMalloc+0x18c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a18      	ldr	r2, [pc, #96]	@ (8004e20 <pvPortMalloc+0x194>)
 8004dc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	4b13      	ldr	r3, [pc, #76]	@ (8004e14 <pvPortMalloc+0x188>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004dd6:	4b13      	ldr	r3, [pc, #76]	@ (8004e24 <pvPortMalloc+0x198>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	4a11      	ldr	r2, [pc, #68]	@ (8004e24 <pvPortMalloc+0x198>)
 8004dde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004de0:	f7fe fcea 	bl	80037b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00b      	beq.n	8004e06 <pvPortMalloc+0x17a>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	60fb      	str	r3, [r7, #12]
}
 8004e00:	bf00      	nop
 8004e02:	bf00      	nop
 8004e04:	e7fd      	b.n	8004e02 <pvPortMalloc+0x176>
	return pvReturn;
 8004e06:	69fb      	ldr	r3, [r7, #28]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3728      	adds	r7, #40	@ 0x28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	20004a10 	.word	0x20004a10
 8004e14:	20004a24 	.word	0x20004a24
 8004e18:	20004a14 	.word	0x20004a14
 8004e1c:	20004a08 	.word	0x20004a08
 8004e20:	20004a18 	.word	0x20004a18
 8004e24:	20004a1c 	.word	0x20004a1c

08004e28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d04f      	beq.n	8004eda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e3a:	2308      	movs	r3, #8
 8004e3c:	425b      	negs	r3, r3
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4413      	add	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	4b25      	ldr	r3, [pc, #148]	@ (8004ee4 <vPortFree+0xbc>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10b      	bne.n	8004e6e <vPortFree+0x46>
	__asm volatile
 8004e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e5a:	f383 8811 	msr	BASEPRI, r3
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	60fb      	str	r3, [r7, #12]
}
 8004e68:	bf00      	nop
 8004e6a:	bf00      	nop
 8004e6c:	e7fd      	b.n	8004e6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00b      	beq.n	8004e8e <vPortFree+0x66>
	__asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	60bb      	str	r3, [r7, #8]
}
 8004e88:	bf00      	nop
 8004e8a:	bf00      	nop
 8004e8c:	e7fd      	b.n	8004e8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	4b14      	ldr	r3, [pc, #80]	@ (8004ee4 <vPortFree+0xbc>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4013      	ands	r3, r2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01e      	beq.n	8004eda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d11a      	bne.n	8004eda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8004ee4 <vPortFree+0xbc>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	43db      	mvns	r3, r3
 8004eae:	401a      	ands	r2, r3
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004eb4:	f7fe fc72 	bl	800379c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee8 <vPortFree+0xc0>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	4a09      	ldr	r2, [pc, #36]	@ (8004ee8 <vPortFree+0xc0>)
 8004ec4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ec6:	6938      	ldr	r0, [r7, #16]
 8004ec8:	f000 f874 	bl	8004fb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004ecc:	4b07      	ldr	r3, [pc, #28]	@ (8004eec <vPortFree+0xc4>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	4a06      	ldr	r2, [pc, #24]	@ (8004eec <vPortFree+0xc4>)
 8004ed4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004ed6:	f7fe fc6f 	bl	80037b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004eda:	bf00      	nop
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20004a24 	.word	0x20004a24
 8004ee8:	20004a14 	.word	0x20004a14
 8004eec:	20004a20 	.word	0x20004a20

08004ef0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ef6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004efa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004efc:	4b27      	ldr	r3, [pc, #156]	@ (8004f9c <prvHeapInit+0xac>)
 8004efe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00c      	beq.n	8004f24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3307      	adds	r3, #7
 8004f0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0307 	bic.w	r3, r3, #7
 8004f16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8004f9c <prvHeapInit+0xac>)
 8004f20:	4413      	add	r3, r2
 8004f22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f28:	4a1d      	ldr	r2, [pc, #116]	@ (8004fa0 <prvHeapInit+0xb0>)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8004fa0 <prvHeapInit+0xb0>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	4413      	add	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f3c:	2208      	movs	r2, #8
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1a9b      	subs	r3, r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0307 	bic.w	r3, r3, #7
 8004f4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4a15      	ldr	r2, [pc, #84]	@ (8004fa4 <prvHeapInit+0xb4>)
 8004f50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f52:	4b14      	ldr	r3, [pc, #80]	@ (8004fa4 <prvHeapInit+0xb4>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2200      	movs	r2, #0
 8004f58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f5a:	4b12      	ldr	r3, [pc, #72]	@ (8004fa4 <prvHeapInit+0xb4>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	1ad2      	subs	r2, r2, r3
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f70:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa4 <prvHeapInit+0xb4>)
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8004fa8 <prvHeapInit+0xb8>)
 8004f7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	4a09      	ldr	r2, [pc, #36]	@ (8004fac <prvHeapInit+0xbc>)
 8004f86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f88:	4b09      	ldr	r3, [pc, #36]	@ (8004fb0 <prvHeapInit+0xc0>)
 8004f8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004f8e:	601a      	str	r2, [r3, #0]
}
 8004f90:	bf00      	nop
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	20000e08 	.word	0x20000e08
 8004fa0:	20004a08 	.word	0x20004a08
 8004fa4:	20004a10 	.word	0x20004a10
 8004fa8:	20004a18 	.word	0x20004a18
 8004fac:	20004a14 	.word	0x20004a14
 8004fb0:	20004a24 	.word	0x20004a24

08004fb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fbc:	4b28      	ldr	r3, [pc, #160]	@ (8005060 <prvInsertBlockIntoFreeList+0xac>)
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	e002      	b.n	8004fc8 <prvInsertBlockIntoFreeList+0x14>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d8f7      	bhi.n	8004fc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	4413      	add	r3, r2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d108      	bne.n	8004ff6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	441a      	add	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	441a      	add	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d118      	bne.n	800503c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	4b15      	ldr	r3, [pc, #84]	@ (8005064 <prvInsertBlockIntoFreeList+0xb0>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d00d      	beq.n	8005032 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	441a      	add	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	e008      	b.n	8005044 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005032:	4b0c      	ldr	r3, [pc, #48]	@ (8005064 <prvInsertBlockIntoFreeList+0xb0>)
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	e003      	b.n	8005044 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	429a      	cmp	r2, r3
 800504a:	d002      	beq.n	8005052 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005052:	bf00      	nop
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	20004a08 	.word	0x20004a08
 8005064:	20004a10 	.word	0x20004a10

08005068 <atoi>:
 8005068:	220a      	movs	r2, #10
 800506a:	2100      	movs	r1, #0
 800506c:	f000 b87a 	b.w	8005164 <strtol>

08005070 <_strtol_l.isra.0>:
 8005070:	2b24      	cmp	r3, #36	@ 0x24
 8005072:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005076:	4686      	mov	lr, r0
 8005078:	4690      	mov	r8, r2
 800507a:	d801      	bhi.n	8005080 <_strtol_l.isra.0+0x10>
 800507c:	2b01      	cmp	r3, #1
 800507e:	d106      	bne.n	800508e <_strtol_l.isra.0+0x1e>
 8005080:	f000 f8a4 	bl	80051cc <__errno>
 8005084:	2316      	movs	r3, #22
 8005086:	6003      	str	r3, [r0, #0]
 8005088:	2000      	movs	r0, #0
 800508a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800508e:	4834      	ldr	r0, [pc, #208]	@ (8005160 <_strtol_l.isra.0+0xf0>)
 8005090:	460d      	mov	r5, r1
 8005092:	462a      	mov	r2, r5
 8005094:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005098:	5d06      	ldrb	r6, [r0, r4]
 800509a:	f016 0608 	ands.w	r6, r6, #8
 800509e:	d1f8      	bne.n	8005092 <_strtol_l.isra.0+0x22>
 80050a0:	2c2d      	cmp	r4, #45	@ 0x2d
 80050a2:	d110      	bne.n	80050c6 <_strtol_l.isra.0+0x56>
 80050a4:	782c      	ldrb	r4, [r5, #0]
 80050a6:	2601      	movs	r6, #1
 80050a8:	1c95      	adds	r5, r2, #2
 80050aa:	f033 0210 	bics.w	r2, r3, #16
 80050ae:	d115      	bne.n	80050dc <_strtol_l.isra.0+0x6c>
 80050b0:	2c30      	cmp	r4, #48	@ 0x30
 80050b2:	d10d      	bne.n	80050d0 <_strtol_l.isra.0+0x60>
 80050b4:	782a      	ldrb	r2, [r5, #0]
 80050b6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80050ba:	2a58      	cmp	r2, #88	@ 0x58
 80050bc:	d108      	bne.n	80050d0 <_strtol_l.isra.0+0x60>
 80050be:	786c      	ldrb	r4, [r5, #1]
 80050c0:	3502      	adds	r5, #2
 80050c2:	2310      	movs	r3, #16
 80050c4:	e00a      	b.n	80050dc <_strtol_l.isra.0+0x6c>
 80050c6:	2c2b      	cmp	r4, #43	@ 0x2b
 80050c8:	bf04      	itt	eq
 80050ca:	782c      	ldrbeq	r4, [r5, #0]
 80050cc:	1c95      	addeq	r5, r2, #2
 80050ce:	e7ec      	b.n	80050aa <_strtol_l.isra.0+0x3a>
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1f6      	bne.n	80050c2 <_strtol_l.isra.0+0x52>
 80050d4:	2c30      	cmp	r4, #48	@ 0x30
 80050d6:	bf14      	ite	ne
 80050d8:	230a      	movne	r3, #10
 80050da:	2308      	moveq	r3, #8
 80050dc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80050e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80050e4:	2200      	movs	r2, #0
 80050e6:	fbbc f9f3 	udiv	r9, ip, r3
 80050ea:	4610      	mov	r0, r2
 80050ec:	fb03 ca19 	mls	sl, r3, r9, ip
 80050f0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80050f4:	2f09      	cmp	r7, #9
 80050f6:	d80f      	bhi.n	8005118 <_strtol_l.isra.0+0xa8>
 80050f8:	463c      	mov	r4, r7
 80050fa:	42a3      	cmp	r3, r4
 80050fc:	dd1b      	ble.n	8005136 <_strtol_l.isra.0+0xc6>
 80050fe:	1c57      	adds	r7, r2, #1
 8005100:	d007      	beq.n	8005112 <_strtol_l.isra.0+0xa2>
 8005102:	4581      	cmp	r9, r0
 8005104:	d314      	bcc.n	8005130 <_strtol_l.isra.0+0xc0>
 8005106:	d101      	bne.n	800510c <_strtol_l.isra.0+0x9c>
 8005108:	45a2      	cmp	sl, r4
 800510a:	db11      	blt.n	8005130 <_strtol_l.isra.0+0xc0>
 800510c:	fb00 4003 	mla	r0, r0, r3, r4
 8005110:	2201      	movs	r2, #1
 8005112:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005116:	e7eb      	b.n	80050f0 <_strtol_l.isra.0+0x80>
 8005118:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800511c:	2f19      	cmp	r7, #25
 800511e:	d801      	bhi.n	8005124 <_strtol_l.isra.0+0xb4>
 8005120:	3c37      	subs	r4, #55	@ 0x37
 8005122:	e7ea      	b.n	80050fa <_strtol_l.isra.0+0x8a>
 8005124:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005128:	2f19      	cmp	r7, #25
 800512a:	d804      	bhi.n	8005136 <_strtol_l.isra.0+0xc6>
 800512c:	3c57      	subs	r4, #87	@ 0x57
 800512e:	e7e4      	b.n	80050fa <_strtol_l.isra.0+0x8a>
 8005130:	f04f 32ff 	mov.w	r2, #4294967295
 8005134:	e7ed      	b.n	8005112 <_strtol_l.isra.0+0xa2>
 8005136:	1c53      	adds	r3, r2, #1
 8005138:	d108      	bne.n	800514c <_strtol_l.isra.0+0xdc>
 800513a:	2322      	movs	r3, #34	@ 0x22
 800513c:	f8ce 3000 	str.w	r3, [lr]
 8005140:	4660      	mov	r0, ip
 8005142:	f1b8 0f00 	cmp.w	r8, #0
 8005146:	d0a0      	beq.n	800508a <_strtol_l.isra.0+0x1a>
 8005148:	1e69      	subs	r1, r5, #1
 800514a:	e006      	b.n	800515a <_strtol_l.isra.0+0xea>
 800514c:	b106      	cbz	r6, 8005150 <_strtol_l.isra.0+0xe0>
 800514e:	4240      	negs	r0, r0
 8005150:	f1b8 0f00 	cmp.w	r8, #0
 8005154:	d099      	beq.n	800508a <_strtol_l.isra.0+0x1a>
 8005156:	2a00      	cmp	r2, #0
 8005158:	d1f6      	bne.n	8005148 <_strtol_l.isra.0+0xd8>
 800515a:	f8c8 1000 	str.w	r1, [r8]
 800515e:	e794      	b.n	800508a <_strtol_l.isra.0+0x1a>
 8005160:	08005bfd 	.word	0x08005bfd

08005164 <strtol>:
 8005164:	4613      	mov	r3, r2
 8005166:	460a      	mov	r2, r1
 8005168:	4601      	mov	r1, r0
 800516a:	4802      	ldr	r0, [pc, #8]	@ (8005174 <strtol+0x10>)
 800516c:	6800      	ldr	r0, [r0, #0]
 800516e:	f7ff bf7f 	b.w	8005070 <_strtol_l.isra.0>
 8005172:	bf00      	nop
 8005174:	20000010 	.word	0x20000010

08005178 <siprintf>:
 8005178:	b40e      	push	{r1, r2, r3}
 800517a:	b510      	push	{r4, lr}
 800517c:	b09d      	sub	sp, #116	@ 0x74
 800517e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005180:	9002      	str	r0, [sp, #8]
 8005182:	9006      	str	r0, [sp, #24]
 8005184:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005188:	480a      	ldr	r0, [pc, #40]	@ (80051b4 <siprintf+0x3c>)
 800518a:	9107      	str	r1, [sp, #28]
 800518c:	9104      	str	r1, [sp, #16]
 800518e:	490a      	ldr	r1, [pc, #40]	@ (80051b8 <siprintf+0x40>)
 8005190:	f853 2b04 	ldr.w	r2, [r3], #4
 8005194:	9105      	str	r1, [sp, #20]
 8005196:	2400      	movs	r4, #0
 8005198:	a902      	add	r1, sp, #8
 800519a:	6800      	ldr	r0, [r0, #0]
 800519c:	9301      	str	r3, [sp, #4]
 800519e:	941b      	str	r4, [sp, #108]	@ 0x6c
 80051a0:	f000 f9a2 	bl	80054e8 <_svfiprintf_r>
 80051a4:	9b02      	ldr	r3, [sp, #8]
 80051a6:	701c      	strb	r4, [r3, #0]
 80051a8:	b01d      	add	sp, #116	@ 0x74
 80051aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051ae:	b003      	add	sp, #12
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	20000010 	.word	0x20000010
 80051b8:	ffff0208 	.word	0xffff0208

080051bc <memset>:
 80051bc:	4402      	add	r2, r0
 80051be:	4603      	mov	r3, r0
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d100      	bne.n	80051c6 <memset+0xa>
 80051c4:	4770      	bx	lr
 80051c6:	f803 1b01 	strb.w	r1, [r3], #1
 80051ca:	e7f9      	b.n	80051c0 <memset+0x4>

080051cc <__errno>:
 80051cc:	4b01      	ldr	r3, [pc, #4]	@ (80051d4 <__errno+0x8>)
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	20000010 	.word	0x20000010

080051d8 <__libc_init_array>:
 80051d8:	b570      	push	{r4, r5, r6, lr}
 80051da:	4d0d      	ldr	r5, [pc, #52]	@ (8005210 <__libc_init_array+0x38>)
 80051dc:	4c0d      	ldr	r4, [pc, #52]	@ (8005214 <__libc_init_array+0x3c>)
 80051de:	1b64      	subs	r4, r4, r5
 80051e0:	10a4      	asrs	r4, r4, #2
 80051e2:	2600      	movs	r6, #0
 80051e4:	42a6      	cmp	r6, r4
 80051e6:	d109      	bne.n	80051fc <__libc_init_array+0x24>
 80051e8:	4d0b      	ldr	r5, [pc, #44]	@ (8005218 <__libc_init_array+0x40>)
 80051ea:	4c0c      	ldr	r4, [pc, #48]	@ (800521c <__libc_init_array+0x44>)
 80051ec:	f000 fc64 	bl	8005ab8 <_init>
 80051f0:	1b64      	subs	r4, r4, r5
 80051f2:	10a4      	asrs	r4, r4, #2
 80051f4:	2600      	movs	r6, #0
 80051f6:	42a6      	cmp	r6, r4
 80051f8:	d105      	bne.n	8005206 <__libc_init_array+0x2e>
 80051fa:	bd70      	pop	{r4, r5, r6, pc}
 80051fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005200:	4798      	blx	r3
 8005202:	3601      	adds	r6, #1
 8005204:	e7ee      	b.n	80051e4 <__libc_init_array+0xc>
 8005206:	f855 3b04 	ldr.w	r3, [r5], #4
 800520a:	4798      	blx	r3
 800520c:	3601      	adds	r6, #1
 800520e:	e7f2      	b.n	80051f6 <__libc_init_array+0x1e>
 8005210:	08005d38 	.word	0x08005d38
 8005214:	08005d38 	.word	0x08005d38
 8005218:	08005d38 	.word	0x08005d38
 800521c:	08005d3c 	.word	0x08005d3c

08005220 <__retarget_lock_acquire_recursive>:
 8005220:	4770      	bx	lr

08005222 <__retarget_lock_release_recursive>:
 8005222:	4770      	bx	lr

08005224 <memcpy>:
 8005224:	440a      	add	r2, r1
 8005226:	4291      	cmp	r1, r2
 8005228:	f100 33ff 	add.w	r3, r0, #4294967295
 800522c:	d100      	bne.n	8005230 <memcpy+0xc>
 800522e:	4770      	bx	lr
 8005230:	b510      	push	{r4, lr}
 8005232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800523a:	4291      	cmp	r1, r2
 800523c:	d1f9      	bne.n	8005232 <memcpy+0xe>
 800523e:	bd10      	pop	{r4, pc}

08005240 <_free_r>:
 8005240:	b538      	push	{r3, r4, r5, lr}
 8005242:	4605      	mov	r5, r0
 8005244:	2900      	cmp	r1, #0
 8005246:	d041      	beq.n	80052cc <_free_r+0x8c>
 8005248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800524c:	1f0c      	subs	r4, r1, #4
 800524e:	2b00      	cmp	r3, #0
 8005250:	bfb8      	it	lt
 8005252:	18e4      	addlt	r4, r4, r3
 8005254:	f000 f8e0 	bl	8005418 <__malloc_lock>
 8005258:	4a1d      	ldr	r2, [pc, #116]	@ (80052d0 <_free_r+0x90>)
 800525a:	6813      	ldr	r3, [r2, #0]
 800525c:	b933      	cbnz	r3, 800526c <_free_r+0x2c>
 800525e:	6063      	str	r3, [r4, #4]
 8005260:	6014      	str	r4, [r2, #0]
 8005262:	4628      	mov	r0, r5
 8005264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005268:	f000 b8dc 	b.w	8005424 <__malloc_unlock>
 800526c:	42a3      	cmp	r3, r4
 800526e:	d908      	bls.n	8005282 <_free_r+0x42>
 8005270:	6820      	ldr	r0, [r4, #0]
 8005272:	1821      	adds	r1, r4, r0
 8005274:	428b      	cmp	r3, r1
 8005276:	bf01      	itttt	eq
 8005278:	6819      	ldreq	r1, [r3, #0]
 800527a:	685b      	ldreq	r3, [r3, #4]
 800527c:	1809      	addeq	r1, r1, r0
 800527e:	6021      	streq	r1, [r4, #0]
 8005280:	e7ed      	b.n	800525e <_free_r+0x1e>
 8005282:	461a      	mov	r2, r3
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	b10b      	cbz	r3, 800528c <_free_r+0x4c>
 8005288:	42a3      	cmp	r3, r4
 800528a:	d9fa      	bls.n	8005282 <_free_r+0x42>
 800528c:	6811      	ldr	r1, [r2, #0]
 800528e:	1850      	adds	r0, r2, r1
 8005290:	42a0      	cmp	r0, r4
 8005292:	d10b      	bne.n	80052ac <_free_r+0x6c>
 8005294:	6820      	ldr	r0, [r4, #0]
 8005296:	4401      	add	r1, r0
 8005298:	1850      	adds	r0, r2, r1
 800529a:	4283      	cmp	r3, r0
 800529c:	6011      	str	r1, [r2, #0]
 800529e:	d1e0      	bne.n	8005262 <_free_r+0x22>
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	6053      	str	r3, [r2, #4]
 80052a6:	4408      	add	r0, r1
 80052a8:	6010      	str	r0, [r2, #0]
 80052aa:	e7da      	b.n	8005262 <_free_r+0x22>
 80052ac:	d902      	bls.n	80052b4 <_free_r+0x74>
 80052ae:	230c      	movs	r3, #12
 80052b0:	602b      	str	r3, [r5, #0]
 80052b2:	e7d6      	b.n	8005262 <_free_r+0x22>
 80052b4:	6820      	ldr	r0, [r4, #0]
 80052b6:	1821      	adds	r1, r4, r0
 80052b8:	428b      	cmp	r3, r1
 80052ba:	bf04      	itt	eq
 80052bc:	6819      	ldreq	r1, [r3, #0]
 80052be:	685b      	ldreq	r3, [r3, #4]
 80052c0:	6063      	str	r3, [r4, #4]
 80052c2:	bf04      	itt	eq
 80052c4:	1809      	addeq	r1, r1, r0
 80052c6:	6021      	streq	r1, [r4, #0]
 80052c8:	6054      	str	r4, [r2, #4]
 80052ca:	e7ca      	b.n	8005262 <_free_r+0x22>
 80052cc:	bd38      	pop	{r3, r4, r5, pc}
 80052ce:	bf00      	nop
 80052d0:	20004b6c 	.word	0x20004b6c

080052d4 <sbrk_aligned>:
 80052d4:	b570      	push	{r4, r5, r6, lr}
 80052d6:	4e0f      	ldr	r6, [pc, #60]	@ (8005314 <sbrk_aligned+0x40>)
 80052d8:	460c      	mov	r4, r1
 80052da:	6831      	ldr	r1, [r6, #0]
 80052dc:	4605      	mov	r5, r0
 80052de:	b911      	cbnz	r1, 80052e6 <sbrk_aligned+0x12>
 80052e0:	f000 fba4 	bl	8005a2c <_sbrk_r>
 80052e4:	6030      	str	r0, [r6, #0]
 80052e6:	4621      	mov	r1, r4
 80052e8:	4628      	mov	r0, r5
 80052ea:	f000 fb9f 	bl	8005a2c <_sbrk_r>
 80052ee:	1c43      	adds	r3, r0, #1
 80052f0:	d103      	bne.n	80052fa <sbrk_aligned+0x26>
 80052f2:	f04f 34ff 	mov.w	r4, #4294967295
 80052f6:	4620      	mov	r0, r4
 80052f8:	bd70      	pop	{r4, r5, r6, pc}
 80052fa:	1cc4      	adds	r4, r0, #3
 80052fc:	f024 0403 	bic.w	r4, r4, #3
 8005300:	42a0      	cmp	r0, r4
 8005302:	d0f8      	beq.n	80052f6 <sbrk_aligned+0x22>
 8005304:	1a21      	subs	r1, r4, r0
 8005306:	4628      	mov	r0, r5
 8005308:	f000 fb90 	bl	8005a2c <_sbrk_r>
 800530c:	3001      	adds	r0, #1
 800530e:	d1f2      	bne.n	80052f6 <sbrk_aligned+0x22>
 8005310:	e7ef      	b.n	80052f2 <sbrk_aligned+0x1e>
 8005312:	bf00      	nop
 8005314:	20004b68 	.word	0x20004b68

08005318 <_malloc_r>:
 8005318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800531c:	1ccd      	adds	r5, r1, #3
 800531e:	f025 0503 	bic.w	r5, r5, #3
 8005322:	3508      	adds	r5, #8
 8005324:	2d0c      	cmp	r5, #12
 8005326:	bf38      	it	cc
 8005328:	250c      	movcc	r5, #12
 800532a:	2d00      	cmp	r5, #0
 800532c:	4606      	mov	r6, r0
 800532e:	db01      	blt.n	8005334 <_malloc_r+0x1c>
 8005330:	42a9      	cmp	r1, r5
 8005332:	d904      	bls.n	800533e <_malloc_r+0x26>
 8005334:	230c      	movs	r3, #12
 8005336:	6033      	str	r3, [r6, #0]
 8005338:	2000      	movs	r0, #0
 800533a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800533e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005414 <_malloc_r+0xfc>
 8005342:	f000 f869 	bl	8005418 <__malloc_lock>
 8005346:	f8d8 3000 	ldr.w	r3, [r8]
 800534a:	461c      	mov	r4, r3
 800534c:	bb44      	cbnz	r4, 80053a0 <_malloc_r+0x88>
 800534e:	4629      	mov	r1, r5
 8005350:	4630      	mov	r0, r6
 8005352:	f7ff ffbf 	bl	80052d4 <sbrk_aligned>
 8005356:	1c43      	adds	r3, r0, #1
 8005358:	4604      	mov	r4, r0
 800535a:	d158      	bne.n	800540e <_malloc_r+0xf6>
 800535c:	f8d8 4000 	ldr.w	r4, [r8]
 8005360:	4627      	mov	r7, r4
 8005362:	2f00      	cmp	r7, #0
 8005364:	d143      	bne.n	80053ee <_malloc_r+0xd6>
 8005366:	2c00      	cmp	r4, #0
 8005368:	d04b      	beq.n	8005402 <_malloc_r+0xea>
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	4639      	mov	r1, r7
 800536e:	4630      	mov	r0, r6
 8005370:	eb04 0903 	add.w	r9, r4, r3
 8005374:	f000 fb5a 	bl	8005a2c <_sbrk_r>
 8005378:	4581      	cmp	r9, r0
 800537a:	d142      	bne.n	8005402 <_malloc_r+0xea>
 800537c:	6821      	ldr	r1, [r4, #0]
 800537e:	1a6d      	subs	r5, r5, r1
 8005380:	4629      	mov	r1, r5
 8005382:	4630      	mov	r0, r6
 8005384:	f7ff ffa6 	bl	80052d4 <sbrk_aligned>
 8005388:	3001      	adds	r0, #1
 800538a:	d03a      	beq.n	8005402 <_malloc_r+0xea>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	442b      	add	r3, r5
 8005390:	6023      	str	r3, [r4, #0]
 8005392:	f8d8 3000 	ldr.w	r3, [r8]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	bb62      	cbnz	r2, 80053f4 <_malloc_r+0xdc>
 800539a:	f8c8 7000 	str.w	r7, [r8]
 800539e:	e00f      	b.n	80053c0 <_malloc_r+0xa8>
 80053a0:	6822      	ldr	r2, [r4, #0]
 80053a2:	1b52      	subs	r2, r2, r5
 80053a4:	d420      	bmi.n	80053e8 <_malloc_r+0xd0>
 80053a6:	2a0b      	cmp	r2, #11
 80053a8:	d917      	bls.n	80053da <_malloc_r+0xc2>
 80053aa:	1961      	adds	r1, r4, r5
 80053ac:	42a3      	cmp	r3, r4
 80053ae:	6025      	str	r5, [r4, #0]
 80053b0:	bf18      	it	ne
 80053b2:	6059      	strne	r1, [r3, #4]
 80053b4:	6863      	ldr	r3, [r4, #4]
 80053b6:	bf08      	it	eq
 80053b8:	f8c8 1000 	streq.w	r1, [r8]
 80053bc:	5162      	str	r2, [r4, r5]
 80053be:	604b      	str	r3, [r1, #4]
 80053c0:	4630      	mov	r0, r6
 80053c2:	f000 f82f 	bl	8005424 <__malloc_unlock>
 80053c6:	f104 000b 	add.w	r0, r4, #11
 80053ca:	1d23      	adds	r3, r4, #4
 80053cc:	f020 0007 	bic.w	r0, r0, #7
 80053d0:	1ac2      	subs	r2, r0, r3
 80053d2:	bf1c      	itt	ne
 80053d4:	1a1b      	subne	r3, r3, r0
 80053d6:	50a3      	strne	r3, [r4, r2]
 80053d8:	e7af      	b.n	800533a <_malloc_r+0x22>
 80053da:	6862      	ldr	r2, [r4, #4]
 80053dc:	42a3      	cmp	r3, r4
 80053de:	bf0c      	ite	eq
 80053e0:	f8c8 2000 	streq.w	r2, [r8]
 80053e4:	605a      	strne	r2, [r3, #4]
 80053e6:	e7eb      	b.n	80053c0 <_malloc_r+0xa8>
 80053e8:	4623      	mov	r3, r4
 80053ea:	6864      	ldr	r4, [r4, #4]
 80053ec:	e7ae      	b.n	800534c <_malloc_r+0x34>
 80053ee:	463c      	mov	r4, r7
 80053f0:	687f      	ldr	r7, [r7, #4]
 80053f2:	e7b6      	b.n	8005362 <_malloc_r+0x4a>
 80053f4:	461a      	mov	r2, r3
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	42a3      	cmp	r3, r4
 80053fa:	d1fb      	bne.n	80053f4 <_malloc_r+0xdc>
 80053fc:	2300      	movs	r3, #0
 80053fe:	6053      	str	r3, [r2, #4]
 8005400:	e7de      	b.n	80053c0 <_malloc_r+0xa8>
 8005402:	230c      	movs	r3, #12
 8005404:	6033      	str	r3, [r6, #0]
 8005406:	4630      	mov	r0, r6
 8005408:	f000 f80c 	bl	8005424 <__malloc_unlock>
 800540c:	e794      	b.n	8005338 <_malloc_r+0x20>
 800540e:	6005      	str	r5, [r0, #0]
 8005410:	e7d6      	b.n	80053c0 <_malloc_r+0xa8>
 8005412:	bf00      	nop
 8005414:	20004b6c 	.word	0x20004b6c

08005418 <__malloc_lock>:
 8005418:	4801      	ldr	r0, [pc, #4]	@ (8005420 <__malloc_lock+0x8>)
 800541a:	f7ff bf01 	b.w	8005220 <__retarget_lock_acquire_recursive>
 800541e:	bf00      	nop
 8005420:	20004b64 	.word	0x20004b64

08005424 <__malloc_unlock>:
 8005424:	4801      	ldr	r0, [pc, #4]	@ (800542c <__malloc_unlock+0x8>)
 8005426:	f7ff befc 	b.w	8005222 <__retarget_lock_release_recursive>
 800542a:	bf00      	nop
 800542c:	20004b64 	.word	0x20004b64

08005430 <__ssputs_r>:
 8005430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005434:	688e      	ldr	r6, [r1, #8]
 8005436:	461f      	mov	r7, r3
 8005438:	42be      	cmp	r6, r7
 800543a:	680b      	ldr	r3, [r1, #0]
 800543c:	4682      	mov	sl, r0
 800543e:	460c      	mov	r4, r1
 8005440:	4690      	mov	r8, r2
 8005442:	d82d      	bhi.n	80054a0 <__ssputs_r+0x70>
 8005444:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005448:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800544c:	d026      	beq.n	800549c <__ssputs_r+0x6c>
 800544e:	6965      	ldr	r5, [r4, #20]
 8005450:	6909      	ldr	r1, [r1, #16]
 8005452:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005456:	eba3 0901 	sub.w	r9, r3, r1
 800545a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800545e:	1c7b      	adds	r3, r7, #1
 8005460:	444b      	add	r3, r9
 8005462:	106d      	asrs	r5, r5, #1
 8005464:	429d      	cmp	r5, r3
 8005466:	bf38      	it	cc
 8005468:	461d      	movcc	r5, r3
 800546a:	0553      	lsls	r3, r2, #21
 800546c:	d527      	bpl.n	80054be <__ssputs_r+0x8e>
 800546e:	4629      	mov	r1, r5
 8005470:	f7ff ff52 	bl	8005318 <_malloc_r>
 8005474:	4606      	mov	r6, r0
 8005476:	b360      	cbz	r0, 80054d2 <__ssputs_r+0xa2>
 8005478:	6921      	ldr	r1, [r4, #16]
 800547a:	464a      	mov	r2, r9
 800547c:	f7ff fed2 	bl	8005224 <memcpy>
 8005480:	89a3      	ldrh	r3, [r4, #12]
 8005482:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800548a:	81a3      	strh	r3, [r4, #12]
 800548c:	6126      	str	r6, [r4, #16]
 800548e:	6165      	str	r5, [r4, #20]
 8005490:	444e      	add	r6, r9
 8005492:	eba5 0509 	sub.w	r5, r5, r9
 8005496:	6026      	str	r6, [r4, #0]
 8005498:	60a5      	str	r5, [r4, #8]
 800549a:	463e      	mov	r6, r7
 800549c:	42be      	cmp	r6, r7
 800549e:	d900      	bls.n	80054a2 <__ssputs_r+0x72>
 80054a0:	463e      	mov	r6, r7
 80054a2:	6820      	ldr	r0, [r4, #0]
 80054a4:	4632      	mov	r2, r6
 80054a6:	4641      	mov	r1, r8
 80054a8:	f000 faa6 	bl	80059f8 <memmove>
 80054ac:	68a3      	ldr	r3, [r4, #8]
 80054ae:	1b9b      	subs	r3, r3, r6
 80054b0:	60a3      	str	r3, [r4, #8]
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	4433      	add	r3, r6
 80054b6:	6023      	str	r3, [r4, #0]
 80054b8:	2000      	movs	r0, #0
 80054ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054be:	462a      	mov	r2, r5
 80054c0:	f000 fac4 	bl	8005a4c <_realloc_r>
 80054c4:	4606      	mov	r6, r0
 80054c6:	2800      	cmp	r0, #0
 80054c8:	d1e0      	bne.n	800548c <__ssputs_r+0x5c>
 80054ca:	6921      	ldr	r1, [r4, #16]
 80054cc:	4650      	mov	r0, sl
 80054ce:	f7ff feb7 	bl	8005240 <_free_r>
 80054d2:	230c      	movs	r3, #12
 80054d4:	f8ca 3000 	str.w	r3, [sl]
 80054d8:	89a3      	ldrh	r3, [r4, #12]
 80054da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054de:	81a3      	strh	r3, [r4, #12]
 80054e0:	f04f 30ff 	mov.w	r0, #4294967295
 80054e4:	e7e9      	b.n	80054ba <__ssputs_r+0x8a>
	...

080054e8 <_svfiprintf_r>:
 80054e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ec:	4698      	mov	r8, r3
 80054ee:	898b      	ldrh	r3, [r1, #12]
 80054f0:	061b      	lsls	r3, r3, #24
 80054f2:	b09d      	sub	sp, #116	@ 0x74
 80054f4:	4607      	mov	r7, r0
 80054f6:	460d      	mov	r5, r1
 80054f8:	4614      	mov	r4, r2
 80054fa:	d510      	bpl.n	800551e <_svfiprintf_r+0x36>
 80054fc:	690b      	ldr	r3, [r1, #16]
 80054fe:	b973      	cbnz	r3, 800551e <_svfiprintf_r+0x36>
 8005500:	2140      	movs	r1, #64	@ 0x40
 8005502:	f7ff ff09 	bl	8005318 <_malloc_r>
 8005506:	6028      	str	r0, [r5, #0]
 8005508:	6128      	str	r0, [r5, #16]
 800550a:	b930      	cbnz	r0, 800551a <_svfiprintf_r+0x32>
 800550c:	230c      	movs	r3, #12
 800550e:	603b      	str	r3, [r7, #0]
 8005510:	f04f 30ff 	mov.w	r0, #4294967295
 8005514:	b01d      	add	sp, #116	@ 0x74
 8005516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800551a:	2340      	movs	r3, #64	@ 0x40
 800551c:	616b      	str	r3, [r5, #20]
 800551e:	2300      	movs	r3, #0
 8005520:	9309      	str	r3, [sp, #36]	@ 0x24
 8005522:	2320      	movs	r3, #32
 8005524:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005528:	f8cd 800c 	str.w	r8, [sp, #12]
 800552c:	2330      	movs	r3, #48	@ 0x30
 800552e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80056cc <_svfiprintf_r+0x1e4>
 8005532:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005536:	f04f 0901 	mov.w	r9, #1
 800553a:	4623      	mov	r3, r4
 800553c:	469a      	mov	sl, r3
 800553e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005542:	b10a      	cbz	r2, 8005548 <_svfiprintf_r+0x60>
 8005544:	2a25      	cmp	r2, #37	@ 0x25
 8005546:	d1f9      	bne.n	800553c <_svfiprintf_r+0x54>
 8005548:	ebba 0b04 	subs.w	fp, sl, r4
 800554c:	d00b      	beq.n	8005566 <_svfiprintf_r+0x7e>
 800554e:	465b      	mov	r3, fp
 8005550:	4622      	mov	r2, r4
 8005552:	4629      	mov	r1, r5
 8005554:	4638      	mov	r0, r7
 8005556:	f7ff ff6b 	bl	8005430 <__ssputs_r>
 800555a:	3001      	adds	r0, #1
 800555c:	f000 80a7 	beq.w	80056ae <_svfiprintf_r+0x1c6>
 8005560:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005562:	445a      	add	r2, fp
 8005564:	9209      	str	r2, [sp, #36]	@ 0x24
 8005566:	f89a 3000 	ldrb.w	r3, [sl]
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 809f 	beq.w	80056ae <_svfiprintf_r+0x1c6>
 8005570:	2300      	movs	r3, #0
 8005572:	f04f 32ff 	mov.w	r2, #4294967295
 8005576:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800557a:	f10a 0a01 	add.w	sl, sl, #1
 800557e:	9304      	str	r3, [sp, #16]
 8005580:	9307      	str	r3, [sp, #28]
 8005582:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005586:	931a      	str	r3, [sp, #104]	@ 0x68
 8005588:	4654      	mov	r4, sl
 800558a:	2205      	movs	r2, #5
 800558c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005590:	484e      	ldr	r0, [pc, #312]	@ (80056cc <_svfiprintf_r+0x1e4>)
 8005592:	f7fa fe2d 	bl	80001f0 <memchr>
 8005596:	9a04      	ldr	r2, [sp, #16]
 8005598:	b9d8      	cbnz	r0, 80055d2 <_svfiprintf_r+0xea>
 800559a:	06d0      	lsls	r0, r2, #27
 800559c:	bf44      	itt	mi
 800559e:	2320      	movmi	r3, #32
 80055a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055a4:	0711      	lsls	r1, r2, #28
 80055a6:	bf44      	itt	mi
 80055a8:	232b      	movmi	r3, #43	@ 0x2b
 80055aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055ae:	f89a 3000 	ldrb.w	r3, [sl]
 80055b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80055b4:	d015      	beq.n	80055e2 <_svfiprintf_r+0xfa>
 80055b6:	9a07      	ldr	r2, [sp, #28]
 80055b8:	4654      	mov	r4, sl
 80055ba:	2000      	movs	r0, #0
 80055bc:	f04f 0c0a 	mov.w	ip, #10
 80055c0:	4621      	mov	r1, r4
 80055c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055c6:	3b30      	subs	r3, #48	@ 0x30
 80055c8:	2b09      	cmp	r3, #9
 80055ca:	d94b      	bls.n	8005664 <_svfiprintf_r+0x17c>
 80055cc:	b1b0      	cbz	r0, 80055fc <_svfiprintf_r+0x114>
 80055ce:	9207      	str	r2, [sp, #28]
 80055d0:	e014      	b.n	80055fc <_svfiprintf_r+0x114>
 80055d2:	eba0 0308 	sub.w	r3, r0, r8
 80055d6:	fa09 f303 	lsl.w	r3, r9, r3
 80055da:	4313      	orrs	r3, r2
 80055dc:	9304      	str	r3, [sp, #16]
 80055de:	46a2      	mov	sl, r4
 80055e0:	e7d2      	b.n	8005588 <_svfiprintf_r+0xa0>
 80055e2:	9b03      	ldr	r3, [sp, #12]
 80055e4:	1d19      	adds	r1, r3, #4
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	9103      	str	r1, [sp, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	bfbb      	ittet	lt
 80055ee:	425b      	neglt	r3, r3
 80055f0:	f042 0202 	orrlt.w	r2, r2, #2
 80055f4:	9307      	strge	r3, [sp, #28]
 80055f6:	9307      	strlt	r3, [sp, #28]
 80055f8:	bfb8      	it	lt
 80055fa:	9204      	strlt	r2, [sp, #16]
 80055fc:	7823      	ldrb	r3, [r4, #0]
 80055fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8005600:	d10a      	bne.n	8005618 <_svfiprintf_r+0x130>
 8005602:	7863      	ldrb	r3, [r4, #1]
 8005604:	2b2a      	cmp	r3, #42	@ 0x2a
 8005606:	d132      	bne.n	800566e <_svfiprintf_r+0x186>
 8005608:	9b03      	ldr	r3, [sp, #12]
 800560a:	1d1a      	adds	r2, r3, #4
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	9203      	str	r2, [sp, #12]
 8005610:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005614:	3402      	adds	r4, #2
 8005616:	9305      	str	r3, [sp, #20]
 8005618:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80056dc <_svfiprintf_r+0x1f4>
 800561c:	7821      	ldrb	r1, [r4, #0]
 800561e:	2203      	movs	r2, #3
 8005620:	4650      	mov	r0, sl
 8005622:	f7fa fde5 	bl	80001f0 <memchr>
 8005626:	b138      	cbz	r0, 8005638 <_svfiprintf_r+0x150>
 8005628:	9b04      	ldr	r3, [sp, #16]
 800562a:	eba0 000a 	sub.w	r0, r0, sl
 800562e:	2240      	movs	r2, #64	@ 0x40
 8005630:	4082      	lsls	r2, r0
 8005632:	4313      	orrs	r3, r2
 8005634:	3401      	adds	r4, #1
 8005636:	9304      	str	r3, [sp, #16]
 8005638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800563c:	4824      	ldr	r0, [pc, #144]	@ (80056d0 <_svfiprintf_r+0x1e8>)
 800563e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005642:	2206      	movs	r2, #6
 8005644:	f7fa fdd4 	bl	80001f0 <memchr>
 8005648:	2800      	cmp	r0, #0
 800564a:	d036      	beq.n	80056ba <_svfiprintf_r+0x1d2>
 800564c:	4b21      	ldr	r3, [pc, #132]	@ (80056d4 <_svfiprintf_r+0x1ec>)
 800564e:	bb1b      	cbnz	r3, 8005698 <_svfiprintf_r+0x1b0>
 8005650:	9b03      	ldr	r3, [sp, #12]
 8005652:	3307      	adds	r3, #7
 8005654:	f023 0307 	bic.w	r3, r3, #7
 8005658:	3308      	adds	r3, #8
 800565a:	9303      	str	r3, [sp, #12]
 800565c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800565e:	4433      	add	r3, r6
 8005660:	9309      	str	r3, [sp, #36]	@ 0x24
 8005662:	e76a      	b.n	800553a <_svfiprintf_r+0x52>
 8005664:	fb0c 3202 	mla	r2, ip, r2, r3
 8005668:	460c      	mov	r4, r1
 800566a:	2001      	movs	r0, #1
 800566c:	e7a8      	b.n	80055c0 <_svfiprintf_r+0xd8>
 800566e:	2300      	movs	r3, #0
 8005670:	3401      	adds	r4, #1
 8005672:	9305      	str	r3, [sp, #20]
 8005674:	4619      	mov	r1, r3
 8005676:	f04f 0c0a 	mov.w	ip, #10
 800567a:	4620      	mov	r0, r4
 800567c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005680:	3a30      	subs	r2, #48	@ 0x30
 8005682:	2a09      	cmp	r2, #9
 8005684:	d903      	bls.n	800568e <_svfiprintf_r+0x1a6>
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0c6      	beq.n	8005618 <_svfiprintf_r+0x130>
 800568a:	9105      	str	r1, [sp, #20]
 800568c:	e7c4      	b.n	8005618 <_svfiprintf_r+0x130>
 800568e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005692:	4604      	mov	r4, r0
 8005694:	2301      	movs	r3, #1
 8005696:	e7f0      	b.n	800567a <_svfiprintf_r+0x192>
 8005698:	ab03      	add	r3, sp, #12
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	462a      	mov	r2, r5
 800569e:	4b0e      	ldr	r3, [pc, #56]	@ (80056d8 <_svfiprintf_r+0x1f0>)
 80056a0:	a904      	add	r1, sp, #16
 80056a2:	4638      	mov	r0, r7
 80056a4:	f3af 8000 	nop.w
 80056a8:	1c42      	adds	r2, r0, #1
 80056aa:	4606      	mov	r6, r0
 80056ac:	d1d6      	bne.n	800565c <_svfiprintf_r+0x174>
 80056ae:	89ab      	ldrh	r3, [r5, #12]
 80056b0:	065b      	lsls	r3, r3, #25
 80056b2:	f53f af2d 	bmi.w	8005510 <_svfiprintf_r+0x28>
 80056b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80056b8:	e72c      	b.n	8005514 <_svfiprintf_r+0x2c>
 80056ba:	ab03      	add	r3, sp, #12
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	462a      	mov	r2, r5
 80056c0:	4b05      	ldr	r3, [pc, #20]	@ (80056d8 <_svfiprintf_r+0x1f0>)
 80056c2:	a904      	add	r1, sp, #16
 80056c4:	4638      	mov	r0, r7
 80056c6:	f000 f879 	bl	80057bc <_printf_i>
 80056ca:	e7ed      	b.n	80056a8 <_svfiprintf_r+0x1c0>
 80056cc:	08005cfd 	.word	0x08005cfd
 80056d0:	08005d07 	.word	0x08005d07
 80056d4:	00000000 	.word	0x00000000
 80056d8:	08005431 	.word	0x08005431
 80056dc:	08005d03 	.word	0x08005d03

080056e0 <_printf_common>:
 80056e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056e4:	4616      	mov	r6, r2
 80056e6:	4698      	mov	r8, r3
 80056e8:	688a      	ldr	r2, [r1, #8]
 80056ea:	690b      	ldr	r3, [r1, #16]
 80056ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056f0:	4293      	cmp	r3, r2
 80056f2:	bfb8      	it	lt
 80056f4:	4613      	movlt	r3, r2
 80056f6:	6033      	str	r3, [r6, #0]
 80056f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056fc:	4607      	mov	r7, r0
 80056fe:	460c      	mov	r4, r1
 8005700:	b10a      	cbz	r2, 8005706 <_printf_common+0x26>
 8005702:	3301      	adds	r3, #1
 8005704:	6033      	str	r3, [r6, #0]
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	0699      	lsls	r1, r3, #26
 800570a:	bf42      	ittt	mi
 800570c:	6833      	ldrmi	r3, [r6, #0]
 800570e:	3302      	addmi	r3, #2
 8005710:	6033      	strmi	r3, [r6, #0]
 8005712:	6825      	ldr	r5, [r4, #0]
 8005714:	f015 0506 	ands.w	r5, r5, #6
 8005718:	d106      	bne.n	8005728 <_printf_common+0x48>
 800571a:	f104 0a19 	add.w	sl, r4, #25
 800571e:	68e3      	ldr	r3, [r4, #12]
 8005720:	6832      	ldr	r2, [r6, #0]
 8005722:	1a9b      	subs	r3, r3, r2
 8005724:	42ab      	cmp	r3, r5
 8005726:	dc26      	bgt.n	8005776 <_printf_common+0x96>
 8005728:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800572c:	6822      	ldr	r2, [r4, #0]
 800572e:	3b00      	subs	r3, #0
 8005730:	bf18      	it	ne
 8005732:	2301      	movne	r3, #1
 8005734:	0692      	lsls	r2, r2, #26
 8005736:	d42b      	bmi.n	8005790 <_printf_common+0xb0>
 8005738:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800573c:	4641      	mov	r1, r8
 800573e:	4638      	mov	r0, r7
 8005740:	47c8      	blx	r9
 8005742:	3001      	adds	r0, #1
 8005744:	d01e      	beq.n	8005784 <_printf_common+0xa4>
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	6922      	ldr	r2, [r4, #16]
 800574a:	f003 0306 	and.w	r3, r3, #6
 800574e:	2b04      	cmp	r3, #4
 8005750:	bf02      	ittt	eq
 8005752:	68e5      	ldreq	r5, [r4, #12]
 8005754:	6833      	ldreq	r3, [r6, #0]
 8005756:	1aed      	subeq	r5, r5, r3
 8005758:	68a3      	ldr	r3, [r4, #8]
 800575a:	bf0c      	ite	eq
 800575c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005760:	2500      	movne	r5, #0
 8005762:	4293      	cmp	r3, r2
 8005764:	bfc4      	itt	gt
 8005766:	1a9b      	subgt	r3, r3, r2
 8005768:	18ed      	addgt	r5, r5, r3
 800576a:	2600      	movs	r6, #0
 800576c:	341a      	adds	r4, #26
 800576e:	42b5      	cmp	r5, r6
 8005770:	d11a      	bne.n	80057a8 <_printf_common+0xc8>
 8005772:	2000      	movs	r0, #0
 8005774:	e008      	b.n	8005788 <_printf_common+0xa8>
 8005776:	2301      	movs	r3, #1
 8005778:	4652      	mov	r2, sl
 800577a:	4641      	mov	r1, r8
 800577c:	4638      	mov	r0, r7
 800577e:	47c8      	blx	r9
 8005780:	3001      	adds	r0, #1
 8005782:	d103      	bne.n	800578c <_printf_common+0xac>
 8005784:	f04f 30ff 	mov.w	r0, #4294967295
 8005788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578c:	3501      	adds	r5, #1
 800578e:	e7c6      	b.n	800571e <_printf_common+0x3e>
 8005790:	18e1      	adds	r1, r4, r3
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	2030      	movs	r0, #48	@ 0x30
 8005796:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800579a:	4422      	add	r2, r4
 800579c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80057a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80057a4:	3302      	adds	r3, #2
 80057a6:	e7c7      	b.n	8005738 <_printf_common+0x58>
 80057a8:	2301      	movs	r3, #1
 80057aa:	4622      	mov	r2, r4
 80057ac:	4641      	mov	r1, r8
 80057ae:	4638      	mov	r0, r7
 80057b0:	47c8      	blx	r9
 80057b2:	3001      	adds	r0, #1
 80057b4:	d0e6      	beq.n	8005784 <_printf_common+0xa4>
 80057b6:	3601      	adds	r6, #1
 80057b8:	e7d9      	b.n	800576e <_printf_common+0x8e>
	...

080057bc <_printf_i>:
 80057bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057c0:	7e0f      	ldrb	r7, [r1, #24]
 80057c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80057c4:	2f78      	cmp	r7, #120	@ 0x78
 80057c6:	4691      	mov	r9, r2
 80057c8:	4680      	mov	r8, r0
 80057ca:	460c      	mov	r4, r1
 80057cc:	469a      	mov	sl, r3
 80057ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057d2:	d807      	bhi.n	80057e4 <_printf_i+0x28>
 80057d4:	2f62      	cmp	r7, #98	@ 0x62
 80057d6:	d80a      	bhi.n	80057ee <_printf_i+0x32>
 80057d8:	2f00      	cmp	r7, #0
 80057da:	f000 80d1 	beq.w	8005980 <_printf_i+0x1c4>
 80057de:	2f58      	cmp	r7, #88	@ 0x58
 80057e0:	f000 80b8 	beq.w	8005954 <_printf_i+0x198>
 80057e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057ec:	e03a      	b.n	8005864 <_printf_i+0xa8>
 80057ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057f2:	2b15      	cmp	r3, #21
 80057f4:	d8f6      	bhi.n	80057e4 <_printf_i+0x28>
 80057f6:	a101      	add	r1, pc, #4	@ (adr r1, 80057fc <_printf_i+0x40>)
 80057f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057fc:	08005855 	.word	0x08005855
 8005800:	08005869 	.word	0x08005869
 8005804:	080057e5 	.word	0x080057e5
 8005808:	080057e5 	.word	0x080057e5
 800580c:	080057e5 	.word	0x080057e5
 8005810:	080057e5 	.word	0x080057e5
 8005814:	08005869 	.word	0x08005869
 8005818:	080057e5 	.word	0x080057e5
 800581c:	080057e5 	.word	0x080057e5
 8005820:	080057e5 	.word	0x080057e5
 8005824:	080057e5 	.word	0x080057e5
 8005828:	08005967 	.word	0x08005967
 800582c:	08005893 	.word	0x08005893
 8005830:	08005921 	.word	0x08005921
 8005834:	080057e5 	.word	0x080057e5
 8005838:	080057e5 	.word	0x080057e5
 800583c:	08005989 	.word	0x08005989
 8005840:	080057e5 	.word	0x080057e5
 8005844:	08005893 	.word	0x08005893
 8005848:	080057e5 	.word	0x080057e5
 800584c:	080057e5 	.word	0x080057e5
 8005850:	08005929 	.word	0x08005929
 8005854:	6833      	ldr	r3, [r6, #0]
 8005856:	1d1a      	adds	r2, r3, #4
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6032      	str	r2, [r6, #0]
 800585c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005860:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005864:	2301      	movs	r3, #1
 8005866:	e09c      	b.n	80059a2 <_printf_i+0x1e6>
 8005868:	6833      	ldr	r3, [r6, #0]
 800586a:	6820      	ldr	r0, [r4, #0]
 800586c:	1d19      	adds	r1, r3, #4
 800586e:	6031      	str	r1, [r6, #0]
 8005870:	0606      	lsls	r6, r0, #24
 8005872:	d501      	bpl.n	8005878 <_printf_i+0xbc>
 8005874:	681d      	ldr	r5, [r3, #0]
 8005876:	e003      	b.n	8005880 <_printf_i+0xc4>
 8005878:	0645      	lsls	r5, r0, #25
 800587a:	d5fb      	bpl.n	8005874 <_printf_i+0xb8>
 800587c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005880:	2d00      	cmp	r5, #0
 8005882:	da03      	bge.n	800588c <_printf_i+0xd0>
 8005884:	232d      	movs	r3, #45	@ 0x2d
 8005886:	426d      	negs	r5, r5
 8005888:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800588c:	4858      	ldr	r0, [pc, #352]	@ (80059f0 <_printf_i+0x234>)
 800588e:	230a      	movs	r3, #10
 8005890:	e011      	b.n	80058b6 <_printf_i+0xfa>
 8005892:	6821      	ldr	r1, [r4, #0]
 8005894:	6833      	ldr	r3, [r6, #0]
 8005896:	0608      	lsls	r0, r1, #24
 8005898:	f853 5b04 	ldr.w	r5, [r3], #4
 800589c:	d402      	bmi.n	80058a4 <_printf_i+0xe8>
 800589e:	0649      	lsls	r1, r1, #25
 80058a0:	bf48      	it	mi
 80058a2:	b2ad      	uxthmi	r5, r5
 80058a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80058a6:	4852      	ldr	r0, [pc, #328]	@ (80059f0 <_printf_i+0x234>)
 80058a8:	6033      	str	r3, [r6, #0]
 80058aa:	bf14      	ite	ne
 80058ac:	230a      	movne	r3, #10
 80058ae:	2308      	moveq	r3, #8
 80058b0:	2100      	movs	r1, #0
 80058b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80058b6:	6866      	ldr	r6, [r4, #4]
 80058b8:	60a6      	str	r6, [r4, #8]
 80058ba:	2e00      	cmp	r6, #0
 80058bc:	db05      	blt.n	80058ca <_printf_i+0x10e>
 80058be:	6821      	ldr	r1, [r4, #0]
 80058c0:	432e      	orrs	r6, r5
 80058c2:	f021 0104 	bic.w	r1, r1, #4
 80058c6:	6021      	str	r1, [r4, #0]
 80058c8:	d04b      	beq.n	8005962 <_printf_i+0x1a6>
 80058ca:	4616      	mov	r6, r2
 80058cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80058d0:	fb03 5711 	mls	r7, r3, r1, r5
 80058d4:	5dc7      	ldrb	r7, [r0, r7]
 80058d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058da:	462f      	mov	r7, r5
 80058dc:	42bb      	cmp	r3, r7
 80058de:	460d      	mov	r5, r1
 80058e0:	d9f4      	bls.n	80058cc <_printf_i+0x110>
 80058e2:	2b08      	cmp	r3, #8
 80058e4:	d10b      	bne.n	80058fe <_printf_i+0x142>
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	07df      	lsls	r7, r3, #31
 80058ea:	d508      	bpl.n	80058fe <_printf_i+0x142>
 80058ec:	6923      	ldr	r3, [r4, #16]
 80058ee:	6861      	ldr	r1, [r4, #4]
 80058f0:	4299      	cmp	r1, r3
 80058f2:	bfde      	ittt	le
 80058f4:	2330      	movle	r3, #48	@ 0x30
 80058f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058fe:	1b92      	subs	r2, r2, r6
 8005900:	6122      	str	r2, [r4, #16]
 8005902:	f8cd a000 	str.w	sl, [sp]
 8005906:	464b      	mov	r3, r9
 8005908:	aa03      	add	r2, sp, #12
 800590a:	4621      	mov	r1, r4
 800590c:	4640      	mov	r0, r8
 800590e:	f7ff fee7 	bl	80056e0 <_printf_common>
 8005912:	3001      	adds	r0, #1
 8005914:	d14a      	bne.n	80059ac <_printf_i+0x1f0>
 8005916:	f04f 30ff 	mov.w	r0, #4294967295
 800591a:	b004      	add	sp, #16
 800591c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	f043 0320 	orr.w	r3, r3, #32
 8005926:	6023      	str	r3, [r4, #0]
 8005928:	4832      	ldr	r0, [pc, #200]	@ (80059f4 <_printf_i+0x238>)
 800592a:	2778      	movs	r7, #120	@ 0x78
 800592c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	6831      	ldr	r1, [r6, #0]
 8005934:	061f      	lsls	r7, r3, #24
 8005936:	f851 5b04 	ldr.w	r5, [r1], #4
 800593a:	d402      	bmi.n	8005942 <_printf_i+0x186>
 800593c:	065f      	lsls	r7, r3, #25
 800593e:	bf48      	it	mi
 8005940:	b2ad      	uxthmi	r5, r5
 8005942:	6031      	str	r1, [r6, #0]
 8005944:	07d9      	lsls	r1, r3, #31
 8005946:	bf44      	itt	mi
 8005948:	f043 0320 	orrmi.w	r3, r3, #32
 800594c:	6023      	strmi	r3, [r4, #0]
 800594e:	b11d      	cbz	r5, 8005958 <_printf_i+0x19c>
 8005950:	2310      	movs	r3, #16
 8005952:	e7ad      	b.n	80058b0 <_printf_i+0xf4>
 8005954:	4826      	ldr	r0, [pc, #152]	@ (80059f0 <_printf_i+0x234>)
 8005956:	e7e9      	b.n	800592c <_printf_i+0x170>
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	f023 0320 	bic.w	r3, r3, #32
 800595e:	6023      	str	r3, [r4, #0]
 8005960:	e7f6      	b.n	8005950 <_printf_i+0x194>
 8005962:	4616      	mov	r6, r2
 8005964:	e7bd      	b.n	80058e2 <_printf_i+0x126>
 8005966:	6833      	ldr	r3, [r6, #0]
 8005968:	6825      	ldr	r5, [r4, #0]
 800596a:	6961      	ldr	r1, [r4, #20]
 800596c:	1d18      	adds	r0, r3, #4
 800596e:	6030      	str	r0, [r6, #0]
 8005970:	062e      	lsls	r6, r5, #24
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	d501      	bpl.n	800597a <_printf_i+0x1be>
 8005976:	6019      	str	r1, [r3, #0]
 8005978:	e002      	b.n	8005980 <_printf_i+0x1c4>
 800597a:	0668      	lsls	r0, r5, #25
 800597c:	d5fb      	bpl.n	8005976 <_printf_i+0x1ba>
 800597e:	8019      	strh	r1, [r3, #0]
 8005980:	2300      	movs	r3, #0
 8005982:	6123      	str	r3, [r4, #16]
 8005984:	4616      	mov	r6, r2
 8005986:	e7bc      	b.n	8005902 <_printf_i+0x146>
 8005988:	6833      	ldr	r3, [r6, #0]
 800598a:	1d1a      	adds	r2, r3, #4
 800598c:	6032      	str	r2, [r6, #0]
 800598e:	681e      	ldr	r6, [r3, #0]
 8005990:	6862      	ldr	r2, [r4, #4]
 8005992:	2100      	movs	r1, #0
 8005994:	4630      	mov	r0, r6
 8005996:	f7fa fc2b 	bl	80001f0 <memchr>
 800599a:	b108      	cbz	r0, 80059a0 <_printf_i+0x1e4>
 800599c:	1b80      	subs	r0, r0, r6
 800599e:	6060      	str	r0, [r4, #4]
 80059a0:	6863      	ldr	r3, [r4, #4]
 80059a2:	6123      	str	r3, [r4, #16]
 80059a4:	2300      	movs	r3, #0
 80059a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059aa:	e7aa      	b.n	8005902 <_printf_i+0x146>
 80059ac:	6923      	ldr	r3, [r4, #16]
 80059ae:	4632      	mov	r2, r6
 80059b0:	4649      	mov	r1, r9
 80059b2:	4640      	mov	r0, r8
 80059b4:	47d0      	blx	sl
 80059b6:	3001      	adds	r0, #1
 80059b8:	d0ad      	beq.n	8005916 <_printf_i+0x15a>
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	079b      	lsls	r3, r3, #30
 80059be:	d413      	bmi.n	80059e8 <_printf_i+0x22c>
 80059c0:	68e0      	ldr	r0, [r4, #12]
 80059c2:	9b03      	ldr	r3, [sp, #12]
 80059c4:	4298      	cmp	r0, r3
 80059c6:	bfb8      	it	lt
 80059c8:	4618      	movlt	r0, r3
 80059ca:	e7a6      	b.n	800591a <_printf_i+0x15e>
 80059cc:	2301      	movs	r3, #1
 80059ce:	4632      	mov	r2, r6
 80059d0:	4649      	mov	r1, r9
 80059d2:	4640      	mov	r0, r8
 80059d4:	47d0      	blx	sl
 80059d6:	3001      	adds	r0, #1
 80059d8:	d09d      	beq.n	8005916 <_printf_i+0x15a>
 80059da:	3501      	adds	r5, #1
 80059dc:	68e3      	ldr	r3, [r4, #12]
 80059de:	9903      	ldr	r1, [sp, #12]
 80059e0:	1a5b      	subs	r3, r3, r1
 80059e2:	42ab      	cmp	r3, r5
 80059e4:	dcf2      	bgt.n	80059cc <_printf_i+0x210>
 80059e6:	e7eb      	b.n	80059c0 <_printf_i+0x204>
 80059e8:	2500      	movs	r5, #0
 80059ea:	f104 0619 	add.w	r6, r4, #25
 80059ee:	e7f5      	b.n	80059dc <_printf_i+0x220>
 80059f0:	08005d0e 	.word	0x08005d0e
 80059f4:	08005d1f 	.word	0x08005d1f

080059f8 <memmove>:
 80059f8:	4288      	cmp	r0, r1
 80059fa:	b510      	push	{r4, lr}
 80059fc:	eb01 0402 	add.w	r4, r1, r2
 8005a00:	d902      	bls.n	8005a08 <memmove+0x10>
 8005a02:	4284      	cmp	r4, r0
 8005a04:	4623      	mov	r3, r4
 8005a06:	d807      	bhi.n	8005a18 <memmove+0x20>
 8005a08:	1e43      	subs	r3, r0, #1
 8005a0a:	42a1      	cmp	r1, r4
 8005a0c:	d008      	beq.n	8005a20 <memmove+0x28>
 8005a0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a16:	e7f8      	b.n	8005a0a <memmove+0x12>
 8005a18:	4402      	add	r2, r0
 8005a1a:	4601      	mov	r1, r0
 8005a1c:	428a      	cmp	r2, r1
 8005a1e:	d100      	bne.n	8005a22 <memmove+0x2a>
 8005a20:	bd10      	pop	{r4, pc}
 8005a22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a2a:	e7f7      	b.n	8005a1c <memmove+0x24>

08005a2c <_sbrk_r>:
 8005a2c:	b538      	push	{r3, r4, r5, lr}
 8005a2e:	4d06      	ldr	r5, [pc, #24]	@ (8005a48 <_sbrk_r+0x1c>)
 8005a30:	2300      	movs	r3, #0
 8005a32:	4604      	mov	r4, r0
 8005a34:	4608      	mov	r0, r1
 8005a36:	602b      	str	r3, [r5, #0]
 8005a38:	f7fb f882 	bl	8000b40 <_sbrk>
 8005a3c:	1c43      	adds	r3, r0, #1
 8005a3e:	d102      	bne.n	8005a46 <_sbrk_r+0x1a>
 8005a40:	682b      	ldr	r3, [r5, #0]
 8005a42:	b103      	cbz	r3, 8005a46 <_sbrk_r+0x1a>
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	bd38      	pop	{r3, r4, r5, pc}
 8005a48:	20004b60 	.word	0x20004b60

08005a4c <_realloc_r>:
 8005a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a50:	4607      	mov	r7, r0
 8005a52:	4614      	mov	r4, r2
 8005a54:	460d      	mov	r5, r1
 8005a56:	b921      	cbnz	r1, 8005a62 <_realloc_r+0x16>
 8005a58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	f7ff bc5b 	b.w	8005318 <_malloc_r>
 8005a62:	b92a      	cbnz	r2, 8005a70 <_realloc_r+0x24>
 8005a64:	f7ff fbec 	bl	8005240 <_free_r>
 8005a68:	4625      	mov	r5, r4
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a70:	f000 f81a 	bl	8005aa8 <_malloc_usable_size_r>
 8005a74:	4284      	cmp	r4, r0
 8005a76:	4606      	mov	r6, r0
 8005a78:	d802      	bhi.n	8005a80 <_realloc_r+0x34>
 8005a7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a7e:	d8f4      	bhi.n	8005a6a <_realloc_r+0x1e>
 8005a80:	4621      	mov	r1, r4
 8005a82:	4638      	mov	r0, r7
 8005a84:	f7ff fc48 	bl	8005318 <_malloc_r>
 8005a88:	4680      	mov	r8, r0
 8005a8a:	b908      	cbnz	r0, 8005a90 <_realloc_r+0x44>
 8005a8c:	4645      	mov	r5, r8
 8005a8e:	e7ec      	b.n	8005a6a <_realloc_r+0x1e>
 8005a90:	42b4      	cmp	r4, r6
 8005a92:	4622      	mov	r2, r4
 8005a94:	4629      	mov	r1, r5
 8005a96:	bf28      	it	cs
 8005a98:	4632      	movcs	r2, r6
 8005a9a:	f7ff fbc3 	bl	8005224 <memcpy>
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	4638      	mov	r0, r7
 8005aa2:	f7ff fbcd 	bl	8005240 <_free_r>
 8005aa6:	e7f1      	b.n	8005a8c <_realloc_r+0x40>

08005aa8 <_malloc_usable_size_r>:
 8005aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aac:	1f18      	subs	r0, r3, #4
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	bfbc      	itt	lt
 8005ab2:	580b      	ldrlt	r3, [r1, r0]
 8005ab4:	18c0      	addlt	r0, r0, r3
 8005ab6:	4770      	bx	lr

08005ab8 <_init>:
 8005ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aba:	bf00      	nop
 8005abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005abe:	bc08      	pop	{r3}
 8005ac0:	469e      	mov	lr, r3
 8005ac2:	4770      	bx	lr

08005ac4 <_fini>:
 8005ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac6:	bf00      	nop
 8005ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aca:	bc08      	pop	{r3}
 8005acc:	469e      	mov	lr, r3
 8005ace:	4770      	bx	lr
